//Per capita deforestation rates
//Colette Salemi
//Extension of Refugee Camps and Deforestation project


//Country shapefiles
var countries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');
var Africa = countries.filter(ee.Filter.eq('wld_rgn', 'Africa'));

//Hansen Global Forest Change image with multiple bands
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015').clip(Africa);


///////////////////////////////////////////////////////////////////////////
//
//Build a forest loss panel
//
///////////////////////////////////////////////////////////////////////////

var lossImage = gfc2014.select(['loss']); //Raster of pixels lost 2000-2014
//loss quantified in terms of square meters lost
var lossAreaImage = lossImage.multiply(ee.Image.pixelArea()); 


//Identifies the year in which the pixel transitioned
var lossYear = gfc2014.select(['lossyear']);

var lossByYear = lossAreaImage.addBands(lossYear) 
  .reduceRegions({ 
  reducer: ee.Reducer.sum().group({groupField: 1}),
  collection: Africa, 
  scale: 30
});


var addGroups = function(feature) {
  var statsFormatted = ee.List(feature.get('groups'))
  .map(function(el) {
    var d = ee.Dictionary(el);
    return [ee.Number(d.get('group')).format("20%02d"), d.get('sum')];
  });
  var statsDictionary = ee.Dictionary(statsFormatted.flatten());

  return feature.set(statsDictionary);
};

print("Final forest loss df", lossByYear.map(addGroups))
lossByYear = lossByYear.map(addGroups)


///////////////////////////////////////////////////////////////////////////
//
//Build a population estimate panel
//
///////////////////////////////////////////////////////////////////////////


var Allpop = ee.ImageCollection("WorldPop/GP/100m/pop");

var topimg=Allpop.limit(10);
print("First pop entries", topimg);


//2000
var Allpop00 = Allpop.filterMetadata('year', 'equals', 2000);
var pop00 = Allpop00.reduce(ee.Reducer.sum());
var pop_2000 = Africa.map(function(feature) {
  return feature.set(pop00.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print("2000 dataframe for pop", pop_2000.limit(10));

//2001
var Allpop01 = Allpop.filterMetadata('year', 'equals', 2001);
var pop01 = Allpop01.reduce(ee.Reducer.sum());
var pop_2001 = Africa.map(function(feature) {
  return feature.set(pop01.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print("2001 dataframe for pop", pop_2001.limit(10));

//2002
var Allpop02 = Allpop.filterMetadata('year', 'equals', 2002);
var pop02 = Allpop02.reduce(ee.Reducer.sum());
var pop_2002 = Africa.map(function(feature) {
  return feature.set(pop02.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2003
var Allpop03 = Allpop.filterMetadata('year', 'equals', 2003);
var pop03 = Allpop03.reduce(ee.Reducer.sum());
var pop_2003 = Africa.map(function(feature) {
  return feature.set(pop03.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2004
var Allpop04 = Allpop.filterMetadata('year', 'equals', 2004);
var pop04 = Allpop04.reduce(ee.Reducer.sum());
var pop_2004 = Africa.map(function(feature) {
  return feature.set(pop04.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2005
var Allpop05 = Allpop.filterMetadata('year', 'equals', 2005);
var pop05 = Allpop05.reduce(ee.Reducer.sum());
var pop_2005 = Africa.map(function(feature) {
  return feature.set(pop05.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2006
var Allpop06 = Allpop.filterMetadata('year', 'equals', 2006);
var pop06 = Allpop06.reduce(ee.Reducer.sum());
var pop_2006 = Africa.map(function(feature) {
  return feature.set(pop06.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2007
var Allpop07 = Allpop.filterMetadata('year', 'equals', 2007);
var pop07 = Allpop07.reduce(ee.Reducer.sum());
var pop_2007 = Africa.map(function(feature) {
  return feature.set(pop07.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2008
var Allpop08 = Allpop.filterMetadata('year', 'equals', 2008);
var pop08 = Allpop08.reduce(ee.Reducer.sum());
var pop_2008 = Africa.map(function(feature) {
  return feature.set(pop08.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2009
var Allpop09 = Allpop.filterMetadata('year', 'equals', 2009);
var pop09 = Allpop09.reduce(ee.Reducer.sum());
var pop_2009 = Africa.map(function(feature) {
  return feature.set(pop09.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2010
var Allpop10 = Allpop.filterMetadata('year', 'equals', 2010);
var pop10 = Allpop10.reduce(ee.Reducer.sum());
var pop_2010 = Africa.map(function(feature) {
  return feature.set(pop10.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2011
var Allpop11 = Allpop.filterMetadata('year', 'equals', 2011);
var pop11 = Allpop11.reduce(ee.Reducer.sum());
var pop_2011 = Africa.map(function(feature) {
  return feature.set(pop11.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print(pop_2011.limit(10));


//2012
var Allpop12 = Allpop.filterMetadata('year', 'equals', 2012);
var pop12 = Allpop12.reduce(ee.Reducer.sum());
var pop_2012 = Africa.map(function(feature) {
  return feature.set(pop12.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});


///////////////////////////////////////////////////////////////////////////
//
//Annual mean nighttime lights panel
//
///////////////////////////////////////////////////////////////////////////


//Exporting
Export.table.toDrive(pop_2000, "Annual_pop_2000");
Export.table.toDrive(pop_2001, "Annual_pop_2001");
Export.table.toDrive(pop_2002, "Annual_pop_2002");
Export.table.toDrive(pop_2003, "Annual_pop_2003");
Export.table.toDrive(pop_2004, "Annual_pop_2004");
Export.table.toDrive(pop_2005, "Annual_pop_2005");
Export.table.toDrive(pop_2006, "Annual_pop_2006");
Export.table.toDrive(pop_2007, "Annual_pop_2007");
Export.table.toDrive(pop_2008, "Annual_pop_2008");
Export.table.toDrive(pop_2009, "Annual_pop_2009");
Export.table.toDrive(pop_2010, "Annual_pop_2010");
Export.table.toDrive(pop_2011, "Annual_pop_2011");
Export.table.toDrive(pop_2012, "Annual_pop_2012");
//Export.table.toDrive(lossByYear, "Annual_forest_loss");


/////////////////////////////////////////////////////////
//
//Using grids
//
/////////////////////////////////////////////////////////


//Grid for SSA - grids need to be within-country, OR we 
//need to identify which grids are in two countries



//Need to merge bands by year in the worldpop data






//Forest loss by year within grid







//Population count within grid










//Loss by year within grid











//Population by year for each grid
