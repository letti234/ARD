///////////////////////////////////////////////////////////////////////
//
//  Initial data prep
//
///////////////////////////////////////////////////////////////////////

//Read in camp data - this is saved in wide format, with binary indicators
//of whether a camp was open 1999-2016
var camps = ee.FeatureCollection('users/salem043/allcampwide');
Map.addLayer(camps);


var campFilter = ee.Filter.inList('country', ['Chad', 'Cameroon',
'CAR', 'Sudan', 'South Sudan', 'Ethiopia',
'Kenya', 'Rwanda', 'Burundi', 'DRC', 'Tanzania', 'Rep. Congo',
]);
var filteredArea = camps.filter(campFilter);

var campRegion=camps.filter(campFilter);
Map.addLayer(campRegion);

//Produce 50 km  buffer around the camps - this the are we are going to study
var bufferPoly = function(feature) {
  return feature.buffer(30000);  //!!Change back to 50k after making sure the border identification works 
};

var buffers = campRegion.map(bufferPoly);
//Map.addLayer(buffers, {}, 'buffers');


var buffsSample=buffers.union();
Map.addLayer(buffsSample, {}, 'buffers dissolved');



//Import Hansen Global Forest Change data
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015');

//The bands we rely on for our analysis
var gfcSampleCover2000= gfc2014.select(["treecover2000"]);
var gfcSampleMask=gfc2014.select(["datamask"])
var gfcSampleLossYr = gfc2014.select(["lossyear"])


///////////////////////////////////////////////////////////////////////
//
//  Clean the GFC data - use the mask layer to assign all pixels
//  with no data or in bodies of water as NA
//
///////////////////////////////////////////////////////////////////////

//Reclassify 2 = NA and 0 = NA in the mask layer

var gfcSampleMask = gfcSampleMask
.remap([ 1],
       [1], null);
       
//Map.addLayer(gfcSampleMask);

//Mask the mask layer to the two other GEE rasters so that NAs in the
//mask layer are NAs in those rasters
//var gfcSampleCover2000Masked=mask()

var gfc2000CoverMasked = gfcSampleCover2000.updateMask(gfcSampleMask);
//Map.addLayer(gfc2000CoverMasked);

var gfcLossYearMasked  = gfcSampleLossYr.updateMask(gfcSampleMask);
//Map.addLayer(gfcLossYearMasked);

///////////////////////////////////////////////////////////////////////
//
//  Tile production - we'll use these tiles to calculate zonal stats.
//  The tiles are the unit of analysis in our regression
//
///////////////////////////////////////////////////////////////////////

//Tiles below are measured in degrees. (Ugh, but I want meters!)
//0.1 degrees is about 11 km at equator. Kept large for training
//Code courtesty of a kind stranger who offered it on Stack Exchange
//!!Need to figure out how to form these tiles in meters
//!!Downscale tiles to finer resolution when scaling up (0.01, about 1 km)
var tiles = tile(buffsSample, 0.01);

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//print(tiles, "Tile example");

//Map.addLayer(tiles, {}, "tiles");

///////////////////////////////////////////////////////////////////////
//
//  GFC zonal stats
//
///////////////////////////////////////////////////////////////////////


//1. Function counts the number of pixels in each tile

var pixelCounts = tiles.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
  }));
});

//Change the property name to avoid issues 
var tileCounts = pixelCounts.select(
    ['treecover2000'], ['number_pixels']            
);

//print("Number of pixels that are not NA", tileCounts);


//2. Function to calculate the mean pct forest cover of tile in 2000

var tileCountsPlusBaseline = tileCounts.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
  }));
});

//print("Updated FC", tileCountsPlusBaseline);


//2. Number of pixels with zero FC in 2000

var gfc2000CoverZeroes = gfc2000CoverMasked
.remap([ 0], [1], null);

//print(gfc2000CoverZeroes, "2000 pixels with zero FC");
//Map.addLayer(gfc2000CoverZeroes);

var TileCounts2 = tileCountsPlusBaseline.map(function(feature) {
  return feature.set(gfc2000CoverZeroes.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
  }));
});

//print(TileCounts2);

var DataRenamed = TileCounts2.map(function(feat){
  return ee.Feature(feat.geometry(), { 
    numPixelsNoNA: feat.get('number_pixels'),
    numPixelsZeroFC2000: feat.get('remapped'),
    meanPctCover2000: feat.get('treecover2000')
  })
})
print(DataRenamed.limit(10), "renaming");




///////////////////////////////////////////////////////////////////////
//
//  Function that counts pixels that made transition by year
//
///////////////////////////////////////////////////////////////////////


// indices for years you want to calculate stats for (2001 to 2014) 
var indices = ee.List.sequence(1,12)

// map over feature collection 
var tiles_new = tiles.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
  var mdata = indices.iterate(function(i, dictin){
    
    // get year for this iteration 
    var thisyear = i

    // create property name for this year (e.g. "loss2001" for first iteration)
    var bandname = ee.String('loss').cat(ee.Number(thisyear).int())
    
    var gfcLossthisyear = gfcLossYearMasked.remap([i], [1], null);
    
    var dict = gfcLossthisyear
    
      // rename band such that the end dictionary key is unique to this year 
      .rename(bandname)
      
      // get zonal statistics 
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100})
      
    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict)
    
  }, ee.Dictionary()) // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(mdata)

})

print(tiles_new.limit(3), "Tile results");



///////////////////////////////////////////////////////////////////////
//
//  identify grid centroids
//
///////////////////////////////////////////////////////////////////////

//Obtain tile centroids - basically converts our tiles into point data
var getCentroids = function(feature) {
  return feature.set({centralPoint: feature.centroid()});
};

var tileCenter = tiles_new.map(getCentroids);

var tileCentroids = tileCenter.map(function(f) {
  var centroid = ee.Feature(ee.List(f.get('centralPoint')));
  return centroid;
});
///Map.addLayer(tileCentroids);

///print(tileCentroids.limit(3), 'centroids');


///////////////////////////////////////////////////////////////////////
//
//  Annual camp counts
//
///////////////////////////////////////////////////////////////////////

//Num. camps at different distances in 2001/////////////////////

var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

//2001
var joined_1 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: tileCentroids, 
  secondary: camps.filterMetadata('open_2001', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist = joined_1.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_1 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2001', neighs.filter(filt).size());
  return(pt);
});

var campcount_1 =  pointdata_withbandcounts_1.select([
  'neighsSize1_2001', 'neighsSize2_2001', 'neighsSize3_2001',
    'neighsSize4_2001', 'neighsSize5_2001', 'neighsSize6_2001',
    'neighsSize7_2001', 'neighsSize8_2001', 'neighsSize9_2001',
    'neighsSize10_2001', 'neighsSize11_2001', 'neighsSize12_2001',
    'neighsSize13_2001', 'neighsSize14_2001', 'neighsSize15_2001',
    'neighsSize16_2001', 'neighsSize17_2001', 'neighsSize18_2001',
    'neighsSize19_2001', 'neighsSize20_2001']);
//Num. camps at different distances in 2001/////////////////////

var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});



//2002
var joined_2 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: campcount_1, 
  secondary: camps.filterMetadata('open_2002', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_2.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_2 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2002', neighs.filter(filt).size());
  return(pt);
});


//2003
var joined_3 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_2, 
  secondary: camps.filterMetadata('open_2003', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_3.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_3 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2003', neighs.filter(filt).size());
  return(pt);
});

print(pointdata_withbandcounts_3.limit(2), "camp count 2003")  



//2004
var joined_4 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_3, 
  secondary: camps.filterMetadata('open_2004', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_4.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_4 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2004', neighs.filter(filt).size());
  return(pt);
});


print(pointdata_withbandcounts_4.limit(2))

//2005
var joined_5 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_4, 
  secondary: camps.filterMetadata('open_2005', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_5.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_5 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2005', neighs.filter(filt).size());
  return(pt);
});


print(pointdata_withbandcounts_5.limit(2), "camp count 2005")  ;


//2006
var joined_6 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_5, 
  secondary: camps.filterMetadata('open_2006', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_6.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_6 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2006', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_6, "camp count 2006")  


//2007
var joined_7 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_6, 
  secondary: camps.filterMetadata('open_2007', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_7.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_7 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2007', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_7, "camp count 2007")  

//2008
var joined_8 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_7, 
  secondary: camps.filterMetadata('open_2008', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_8.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_8 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2008', neighs.filter(filt).size());
  return(pt);
});


//2009
var joined_9 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_8, 
  secondary: camps.filterMetadata('open_2009', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_9.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_9 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2009', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_9, "camp count 2009")  ;


//2010
var joined_10 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_9, 
  secondary: camps.filterMetadata('open_2010', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_10.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_10 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2010', neighs.filter(filt).size());
  return(pt);
});

//2011
var joined_11 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_10, 
  secondary: camps.filterMetadata('open_2011', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_11.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_11 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2011', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_11, "camo count 2011")  

//2012
var joined_12 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_11, 
  secondary: camps.filterMetadata('open_2012', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_12.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_12 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2012', neighs.filter(filt).size());
  return(pt);
});


///////////////////////////////////////////////////////////////////////
//
//  Zonal statistics from biome data: includes
//    1. Biome of centroid
//
///////////////////////////////////////////////////////////////////////

var ecodata = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017');
//print('ecoregions', ecodata.limit(10));


//Specify the properties that I want to copy from the SSA shapefile
var properties = ["BIOME_NAME","ECO_NAME", "systemindex"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(campcount_1, ecodata, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecosample = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});


//print('sample extract', eco.limit(1));


//-------------------------------------------------------------
//
//EXTRACTING INFORMATION FROM THE SSA SHAPEFILE 
//
//-------------------------------------------------------------

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts')


//Specify the properties that I want to copy from the SSA shapefile
var properties = ["ADM0","ADM1", "ADM2"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(ecosample, SSA, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var SSAdata = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print(SSAdata, "SSA ADM of centroid");

///////////////////////////////////////////////////////////////////////
//
//  Remoteness measure - use Harvest choice to get travel time from centroid
//
///////////////////////////////////////////////////////////////////////

var distanceMkt20K = ee.Image('users/salem043/traveltimetomarket_ssa_020k');

print(distanceMkt20K);


var remoteness = SSAdata.map(function(feature) {
  return feature.set(distanceMkt20K.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

print(remoteness.limit(2), "travel time to nearest mkt +2k");



/////////////////////////////////////////////////////

var toyFilter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
});

// Define the join.
var innerJoin = ee.Join.inner();

// Apply the join.
var df1 = innerJoin.apply(tiles_new, campcount_1,  toyFilter);
print('Preliminary feature collection', df1.limit(10));

var df1_1=df1.map(function(pair) {
  var f1 = ee.Feature(pair.get('primary'));
  var f2 = ee.Feature(pair.get('secondary'));
  return f1.set(f2.toDictionary());
});

print(df1_1.limit(1));

/////////////////////////////////////////////////////
//Export
///////////////////////////////////////////////////
print(pointdata_withbandcounts_12.limit(1)); ///Camp counts by buffers and years
print(ecosample.limit(1)); ///Biome
print(remoteness.limit(1)); ///Distance to nearest market and 
print(tiles_new.limit(1)); ///Polygons
print(DataRenamed.limit(1)); //print as CSV and merge

Export.table.toDrive({
  collection: tiles_new.select(['system:index', 'loss1', 'loss2', 'loss3',
  'loss4', 'loss5', 'loss6', 'loss7', 'loss8', 'loss9', 'loss10', 'loss11', 'loss12'],
  ['ID', 'loss2001', 'loss2002', 'loss2003', 'loss2004', 'loss2005', 'loss2006', 
  'loss2007', 'loss2008', 'loss2009', 'loss2010', 'loss2011', 'loss2012'   ]),
  fileFormat: 'shp',
  description: 'ShapefileForestlossGroup2',
  folder: "Deforestation2"
});

Export.table.toDrive(ecosample, "biomeGroup2", "Deforestation2");
Export.table.toDrive(remoteness, "remotenessADMGroup2", "Deforestation2");
Export.table.toDrive(pointdata_withbandcounts_12, "CampDistanceDataGroup2", "Deforestation2");
Export.table.toDrive(DataRenamed, "GFCAdditionalGroup2", "Deforestation2");
