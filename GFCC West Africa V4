//Refugees and deforestation analysis
//Tabular data export: Group 2

///////////////////////////////////////////////////////////////////////
//
//  Initial data prep
//
///////////////////////////////////////////////////////////////////////


var camps = ee.FeatureCollection('users/salem043/allcampwidev2');

var tilesAll = ee.FeatureCollection('users/salem043/deforSample');

var groupFilter = ee.Filter.equals('group', 1);
//var groupFilter = ee.Filter.equals('ID', '2_829');


var tiles=tilesAll.filter(groupFilter);

print(tilesAll.limit(5));
print(tiles.limit(5));
Map.addLayer(tiles.limit(10000));

///////////////////////////////////////////////////////////////////////
//
//  GFCC DATA 2000
//
///////////////////////////////////////////////////////////////////////

var gfcc_2000 = ee.ImageCollection('NASA/MEASURES/GFCC/TC/v3')
      .filter(ee.Filter.date('2000-01-01', '2000-12-31'))
      .select('tree_canopy_cover').mosaic();

//Mean pct FC per tile 2000
var mean_2000 = tiles.map(function(feature) {
  return feature.set(gfcc_2000.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 30
  }));
});


Export.table.toDrive(mean_2000, "gfccMeanGroup2_2000", "deforTilesGEE");


//Number of tiles with 50+ FC 2000
var fifty_2000 = gfcc_2000.gte(50).and(gfcc_2000.lte(100));

var count50_2000 = tiles.map(function(feature) {
  return feature.set(fifty_2000.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});

Export.table.toDrive(count50_2000, "gfcc50countGroup2_2000", "deforTilesGEE");

//Number of tiles with 10+ FC 2000
var ten_2000 = gfcc_2000.gte(10).and(gfcc_2000.lte(100));

var count10_2000 = tiles.map(function(feature) {
  return feature.set(ten_2000.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});


Export.table.toDrive(count10_2000, "gfcc10countGroup2_2000", "deforTilesGEE");

///////////////////////////////////////////////////////////////////////
//
//  GFCC DATA 2005
//
///////////////////////////////////////////////////////////////////////

var gfcc_2005 = ee.ImageCollection('NASA/MEASURES/GFCC/TC/v3')
      .filter(ee.Filter.date('2005-01-01', '2005-12-31'))
      .select('tree_canopy_cover').mosaic();

//Mean pct FC per tile 2005
var mean_2005 = tiles.map(function(feature) {
  return feature.set(gfcc_2005.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 30
  }));
});


Export.table.toDrive(mean_2005, "gfccMeanGroup2_2005", "deforTilesGEE");


//Number of tiles with 50+ FC 2005
var fifty_2005 = gfcc_2005.gte(50).and(gfcc_2005.lte(100));

var count50_2005 = tiles.map(function(feature) {
  return feature.set(fifty_2005.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});

Export.table.toDrive(count50_2005, "gfcc50countGroup2_2005", "deforTilesGEE");

//Number of tiles with 10+ FC 2005
var ten_2005 = gfcc_2005.gte(10).and(gfcc_2005.lte(100));

var count10_2005 = tiles.map(function(feature) {
  return feature.set(ten_2005.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});


Export.table.toDrive(count10_2005, "gfcc10countGroup2_2005", "deforTilesGEE")

///////////////////////////////////////////////////////////////////////
//
//  GFCC DATA 2010
//
///////////////////////////////////////////////////////////////////////

var gfcc_2010 = ee.ImageCollection('NASA/MEASURES/GFCC/TC/v3')
      .filter(ee.Filter.date('2010-01-01', '2010-12-31'))
      .select('tree_canopy_cover').mosaic();

//Mean pct FC per tile 2010
var mean_2010 = tiles.map(function(feature) {
  return feature.set(gfcc_2010.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 30
  }));
});


Export.table.toDrive(mean_2010, "gfccMeanGroup2_2010", "deforTilesGEE");


//Number of tiles with 50+ FC 2010
var fifty_2010 = gfcc_2010.gte(50).and(gfcc_2010.lte(100));

var count50_2010 = tiles.map(function(feature) {
  return feature.set(fifty_2010.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});

Export.table.toDrive(count50_2010, "gfcc50countGroup2_2010", "deforTilesGEE");

//Number of tiles with 10+ FC 2010
var ten_2010 = gfcc_2010.gte(10).and(gfcc_2010.lte(100));

var count10_2010 = tiles.map(function(feature) {
  return feature.set(ten_2010.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});


Export.table.toDrive(count10_2010, "gfcc10countGroup2_2010", "deforTilesGEE");


///////////////////////////////////////////////////////////////////////
//
//  Worldpop data
//
///////////////////////////////////////////////////////////////////////

var years = ee.List.sequence(2000, 2012)
// Make some band names from the years numbers.
var yearBandNames = years.map(function(n) { return ee.Number(n).format("pop_%d") })

var yearImages = ee.ImageCollection(
  years.map(function(year) {
    var oneYear = ee.ImageCollection("WorldPop/GP/100m/pop")
      .filter(ee.Filter.calendarRange(year, year, 'year'))
      .filterBounds(tiles)
    return oneYear.mosaic()
  }))
  .toBands()
  .rename(yearBandNames)
  
var pop_2001 = yearImages.select("pop_2001");

var sumPop_2001 = tiles.map(function(feature) {
  return feature.set(pop_2001.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2002 = yearImages.select("pop_2002");

var sumPop_2002 = sumPop_2001.map(function(feature) {
  return feature.set(pop_2002.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2003 = yearImages.select("pop_2003");

var sumPop_2003 = sumPop_2002.map(function(feature) {
  return feature.set(pop_2003.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2004 = yearImages.select("pop_2004");

var sumPop_2004 = sumPop_2003.map(function(feature) {
  return feature.set(pop_2004.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2005 = yearImages.select("pop_2005");

var sumPop_2005 = sumPop_2004.map(function(feature) {
  return feature.set(pop_2005.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2006 = yearImages.select("pop_2006");

var sumPop_2006 = sumPop_2005.map(function(feature) {
  return feature.set(pop_2006.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2007 = yearImages.select("pop_2007");

var sumPop_2007 = sumPop_2006.map(function(feature) {
  return feature.set(pop_2007.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2008 = yearImages.select("pop_2008");

var sumPop_2008 = sumPop_2007.map(function(feature) {
  return feature.set(pop_2008.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2009 = yearImages.select("pop_2009");

var sumPop_2009 = sumPop_2008.map(function(feature) {
  return feature.set(pop_2009.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2010 = yearImages.select("pop_2010");

var sumPop_2010 = sumPop_2009.map(function(feature) {
  return feature.set(pop_2010.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2011 = yearImages.select("pop_2011");

var sumPop_2011 = sumPop_2010.map(function(feature) {
  return feature.set(pop_2011.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

var pop_2012 = yearImages.select("pop_2012");

var sumPop_2012 = sumPop_2011.map(function(feature) {
  return feature.set(pop_2012.reduceRegion({
    reducer: ee.Reducer.sum(), geometry: feature.geometry(), scale: 30
  }));
});

print(sumPop_2012);

Export.table.toDrive(sumPop_2012, "worldPopGroup2", "deforTilesGEE");



///////////////////////////////////////////////////////////////////////
//
//  Nighttime lights
//
///////////////////////////////////////////////////////////////////////


var light = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')
                  .filter(ee.Filter.date('2001-01-01', '2012-12-31'));

var lt_2001 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152001').toBands();

var light_2001 = tiles.map(function(feature) {
  return feature.set(lt_2001.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2002 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152002').toBands();

var light_2002 = light_2001.map(function(feature) {
  return feature.set(lt_2002.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2003 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152003').toBands();

var light_2003 = light_2002.map(function(feature) {
  return feature.set(lt_2003.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2004 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152004').toBands();

var light_2004 = light_2003.map(function(feature) {
  return feature.set(lt_2004.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2005 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152005').toBands();

var light_2005 = light_2004.map(function(feature) {
  return feature.set(lt_2005.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2006 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152006').toBands();

var light_2006 = light_2005.map(function(feature) {
  return feature.set(lt_2006.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2007 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152007').toBands();

var light_2007 = light_2006.map(function(feature) {
  return feature.set(lt_2007.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2008 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F152008').toBands();

var light_2008 = light_2007.map(function(feature) {
  return feature.set(lt_2008.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2009 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F162009').toBands();

var light_2009 = light_2008.map(function(feature) {
  return feature.set(lt_2009.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2010 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F182010').toBands();

var light_2010 = light_2009.map(function(feature) {
  return feature.set(lt_2010.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});


var lt_2011 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F182011').toBands();

var light_2011 = light_2010.map(function(feature) {
  return feature.set(lt_2011.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

var lt_2012 = light.select('stable_lights').
filterMetadata('system:index', 'equals', 'F182012').toBands();

var light_2012 = light_2011.map(function(feature) {
  return feature.set(lt_2012.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(), scale: 30 }));
});

Export.table.toDrive(light_2012, "nightLightsGroup2", "deforTilesGEE");

print(light_2012);






//Num. camps at different distances in 2000/////////////////////

var getCentroids = function(feature) {
  return feature.set({centralPoint: feature.centroid()});
};

var tileCenter = tiles.map(getCentroids);

var tileCentroids = tileCenter.map(function(f) {
  var centroid = ee.Feature(ee.List(f.get('centralPoint')));
  return centroid;
});

var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

//2000
var joined_0 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: tileCentroids, 
  secondary: camps.filterMetadata('open_2000', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist = joined_0.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_0 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2000', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2000', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2000', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2000', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2000', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2000', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2000', neighs.filter(filt).size());
  return(pt);
});

print(pointdata_withbandcounts_0 .limit(2), "Camp count data for 2000"); 
Export.table.toDrive(pointdata_withbandcounts_0 , "camps2000Group2", "deforTilesGEE");


