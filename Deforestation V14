///////////////////////////////////////////////////////////////////////
//
//  Initial data prep
//
///////////////////////////////////////////////////////////////////////

//Read in camp data - this is saved in wide format, with binary indicators
//of whether a camp was open 1999-2016
var camps = ee.FeatureCollection('users/salem043/allcampwide');

//Produce 50 km  buffer around the camps - this the are we are going to study
var bufferPoly = function(feature) {
  return feature.buffer(50000);   
};

var buffers = camps.map(bufferPoly);
//Map.addLayer(buffers, {color: 'yellow'}, 'buffers');


//For training, select one of these buffers 
//!!!Drop this when producing full sample
var buffsSample=buffers.limit(1);
//Map.addLayer(buffsSample);
Map.centerObject(buffsSample);


//Produce a 1 km buffer around the camp: this is the camp area, we want
//to drop any tiles that interesct this buffer
var bufferPoly2 = function(feature) {
  return feature.buffer(1000);   
};

var campArea = camps.map(bufferPoly2);


//Import Hansen Global Forest Change data
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015');

//Clip GFC down to the subsample buffer
//!!Change this when upscaling
var gfcSample = gfc2014.clip(buffsSample);
print(gfcSample, "GFC geographic subsample")

//The bands we rely on for our analysis
var gfcSampleCover2000= gfcSample.select(["treecover2000"]);
var gfcSampleMask=gfcSample.select(["datamask"])
var gfcSampleLossYr = gfcSample.select(["lossyear"])


///////////////////////////////////////////////////////////////////////
//
//  Clean the GFC data - use the mask layer to assign all pixels
//  with no data or in bodies of water as NA
//
///////////////////////////////////////////////////////////////////////

//Reclassify 2 = NA and 0 = NA in the mask layer

var gfcSampleMask = gfcSampleMask
.remap([ 1],
       [1], null);
       
//Map.addLayer(gfcSampleMask);

//Mask the mask layer to the two other GEE rasters so that NAs in the
//mask layer are NAs in those rasters
//var gfcSampleCover2000Masked=mask()

var gfc2000CoverMasked = gfcSampleCover2000.updateMask(gfcSampleMask);
//Map.addLayer(gfc2000CoverMasked);

var gfcLossYearMasked  = gfcSampleLossYr.updateMask(gfcSampleMask);
//Map.addLayer(gfcLossYearMasked);

///////////////////////////////////////////////////////////////////////
//
//  Tile production - we'll use these tiles to calculate zonal stats.
//  The tiles are the unit of analysis in our regression
//
///////////////////////////////////////////////////////////////////////

//Tiles below are measured in degrees. (Ugh, but I want meters!)
//0.1 degrees is about 11 km at equator. Kept large for training
//Code courtesty of a kind stranger who offered it on Stack Exchange
//!!Need to figure out how to form these tiles in meters
//!!Downscale tiles to finer resolution when scaling up (0.01, about 1 km)
var tiles = tile(buffsSample, 0.1);

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

print(tiles, "Tile example");

Map.addLayer(tiles);


///////////////////////////////////////////////////////////////////////
//
//  Zonal statistics from GFC: includes
//    1. Number of non-NA GFC pixels in each tile
//    2. GFC Mean pct. forest cover in 200 for each tile
//    3. Number of pixels with zero FC in 2000
//
///////////////////////////////////////////////////////////////////////


//1. Function counts the number of pixels in each tile

var pixelCounts = tiles.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//Change the property name to avoid issues 
var tileCounts = pixelCounts.select(
    ['treecover2000'], ['number_pixels']            
);

print("Number of pixels that are not NA", tileCounts);


//2. Function to calculate the mean pct forest cover of tile in 2000

var tileCountsPlusBaseline = tileCounts.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

print("Updated FC", tileCountsPlusBaseline);



//2. Number of pixels with zero FC in 2000

var gfc2000CoverZeroes = gfc2000CoverMasked
.remap([ 0], [1], null);

print(gfc2000CoverZeroes, "2000 pixels with zero FC");
//Map.addLayer(gfc2000CoverZeroes);

var TileCounts2 = tileCountsPlusBaseline.map(function(feature) {
  return feature.set(gfc2000CoverZeroes.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

print(TileCounts2);

var DataRenamed = TileCounts2.map(function(feat){
  return ee.Feature(feat.geometry(), { 
    numPixelsNoNA: feat.get('number_pixels'),
    numPixelsZeroFC2000: feat.get('remapped'),
    meanPctCover2000: feat.get('treecover2000')
  })
})
print(DataRenamed, "renaming");

//Num. pixels transition to zero FC in 2001, 2002, 2003, etc.


///////////////////////////////////////////////////////////////////////
//
//  Zonal statistics from GFC:  counts of annual pixel transition to
//                              zero FC (Learn to do this in a function)
//
///////////////////////////////////////////////////////////////////////

//2001
var gfcLoss2001 = gfcLossYearMasked
.remap([1], [1], null);

var gfcLoss2001Clean = gfcLoss2001.select(
  ['remapped'], ['loss2001']);

var loss2001 = DataRenamed.map(function(feature) {
  return feature.set(gfcLoss2001Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//2002
var gfcLoss2002 = gfcLossYearMasked
.remap([2], [1], null);

var gfcLoss2002Clean = gfcLoss2002.select(
  ['remapped'], ['loss2002']);

var loss2002 = loss2001.map(function(feature) {
  return feature.set(gfcLoss2002Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});


//2003
var gfcLoss2003 = gfcLossYearMasked
.remap([3], [1], null);

var gfcLoss2003Clean = gfcLoss2003.select(
  ['remapped'], ['loss2003']);

var loss2003 = loss2002.map(function(feature) {
  return feature.set(gfcLoss2003Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//2004
var gfcLoss2004 = gfcLossYearMasked
.remap([4], [1], null);

var gfcLoss2004Clean = gfcLoss2004.select(
  ['remapped'], ['loss2004']);

var loss2004 = loss2003.map(function(feature) {
  return feature.set(gfcLoss2004Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});


//2005
var gfcLoss2005 = gfcLossYearMasked
.remap([5], [1], null);

var gfcLoss2005Clean = gfcLoss2005.select(
  ['remapped'], ['loss2005']);

var loss2005 = loss2004.map(function(feature) {
  return feature.set(gfcLoss2005Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});


//2006
var gfcLoss2006 = gfcLossYearMasked
.remap([6], [1], null);

var gfcLoss2006Clean = gfcLoss2006.select(
  ['remapped'], ['loss2006']);

var loss2006 = loss2005.map(function(feature) {
  return feature.set(gfcLoss2006Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});


//2007
var gfcLoss2007 = gfcLossYearMasked
.remap([7], [1], null);

var gfcLoss2007Clean = gfcLoss2007.select(
  ['remapped'], ['loss2007']);

var loss2007 = loss2006.map(function(feature) {
  return feature.set(gfcLoss2007Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//2008
var gfcLoss2008 = gfcLossYearMasked
.remap([8], [1], null);

var gfcLoss2008Clean = gfcLoss2008.select(
  ['remapped'], ['loss2008']);

var loss2008 = loss2007.map(function(feature) {
  return feature.set(gfcLoss2008Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});


//2009
var gfcLoss2009 = gfcLossYearMasked
.remap([9], [1], null);

var gfcLoss2009Clean = gfcLoss2009.select(
  ['remapped'], ['loss2009']);

var loss2009 = loss2008.map(function(feature) {
  return feature.set(gfcLoss2009Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//2010
var gfcLoss2010 = gfcLossYearMasked
.remap([10], [1], null);

var gfcLoss2010Clean = gfcLoss2010.select(
  ['remapped'], ['loss2010']);

var loss2010 = loss2009.map(function(feature) {
  return feature.set(gfcLoss2010Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//2011
var gfcLoss2011 = gfcLossYearMasked
.remap([11], [1], null);

var gfcLoss2011Clean = gfcLoss2011.select(
  ['remapped'], ['loss2011']);

var loss2011 = loss2010.map(function(feature) {
  return feature.set(gfcLoss2011Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});


//2012
var gfcLoss2012 = gfcLossYearMasked
.remap([12], [1], null);

var gfcLoss2012Clean = gfcLoss2012.select(
  ['remapped'], ['loss2012']);

var loss2012 = loss2011.map(function(feature) {
  return feature.set(gfcLoss2012Clean.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

print(loss2012, "Tile counts of transition to zero FC");

///////////////////////////////////////////////////////////////////////
//
//  Zonal statistics from GFC and ARD: includes
//    1. No. of camp area buffer boundaties 1-2, 2-3, ...19-20 
//       km from tile centroid that are open in 2001, 2002, ...2012
//
///////////////////////////////////////////////////////////////////////

//Map.addLayer(campArea, {color: 'cyan'}, 'camp area');
Map.addLayer(camps, {color: 'red'}, 'camps');

//Obtain tile centroids - basically converts our tiles into point data
var getCentroids = function(feature) {
  return feature.set({centralPoint: feature.centroid()});
};

var tileCenter = loss2012.map(getCentroids);

var tileCentroids = tileCenter.map(function(f) {
  var centroid = ee.Feature(ee.List(f.get('centralPoint')));
  return centroid;
});
//Map.addLayer(tileCentroids);

print(tileCentroids, 'centroids');

//For each centroid, draw a 1 km polygon around the centroid and
//count the number of camps within that polygon

//For training, execute on the first centroid
var centroidMini = tileCentroids.limit(1);
Map.addLayer(centroidMini);



//No. camps at different distances in 2001/////////////////////

var joined_1 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: centroidMini, 
  secondary: camps.filterMetadata('open_2001', 'equals', 1), 
  condition: spatialFilter
});

var withNearestDist_1 = joined_1.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_1 = withNearestDist_1.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  return(pt);
});

print(pointdata_withbandcounts_1, "Camp counts first try")


///////////////////////////////////////////////////////////////////////
//
//  Zonal statistics from biome data: includes
//    1. Pct. tile in grasslands, savannahs biome
//    2. Pct. tile in rainforest biome
//    3. Pct. tile in other biomes 
//
///////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////
//
//  Remoteness measure - TBD
//
///////////////////////////////////////////////////////////////////////



