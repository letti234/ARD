//Load the camp data from the fusion table
var camps = ee.FeatureCollection('ft:1DCL5m_EO8kKMis2BWTdzfg-i9uc4uAZ2xNLQuhf7');
Map.addLayer(camps, {color: 'red'}, 'camps');

//Generate a 50 km  buffer around camps
var bufferPoly = function(feature) {
  return feature.buffer(50000);   
};

var buffers = camps.map(bufferPoly);
Map.addLayer(buffers, {color: 'yellow'}, 'buffers');

//Randomly select 10 pixels within the buffer areas (keep N small for training)
var points = ee.FeatureCollection.randomPoints(buffers, 10, 0, 10);

print("Initial draw of points", points);
Map.addLayer(points, {color: 'blue'}, 'points');





var sources = ee.Image().toByte().paint(camps, 1);

sources = sources.updateMask(sources);

// The cost data is generated from classes in ESA/GLOBCOVER.
var cover = ee.Image('ESA/GLOBCOVER_L4_200901_200912_V2_3').select(0);

// Classes 60, 80, 110, 140 have cost 1.
// Classes 40, 90, 120, 130, 170 have cost 2.
// Classes 50, 70, 150, 160 have cost 3.
var cost =
  cover.eq(60).or(cover.eq(80)).or(cover.eq(110)).or(cover.eq(140))
      .multiply(1).add(
  cover.eq(40).or(cover.eq(90)).or(cover.eq(120)).or(cover.eq(130))
    .or(cover.eq(170))
      .multiply(2).add(
  cover.eq(50).or(cover.eq(70)).or(cover.eq(150)).or(cover.eq(160))
      .multiply(3)));

// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 50 * 1000 // 50 kilometers
});

// Display the results
Map.addLayer(cumulativeCost, {min: 0, max: 5e4}, 'accumulated cost');
print(cumulativeCost);


//extract cumulative cost for each random point


//Specify the properties that I want to copy from the SSA shapefile
var properties = ["ADM0","ADM1", "ADM2", "campid"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(pointdata, SSA, spatialFilter);

// since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var featuresWithProp = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print('District data for sample points', featuresWithProp);






Map.addLayer(geometry, {color: 'FF0000'}, 'source geometry');