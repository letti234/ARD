//Create demo data//////////////////////////////////////

var region = ee.Geometry.Rectangle(-120, 34.669, -99.536, 50.064);

// Create 5 random points in the region.
var randomPoints = ee.FeatureCollection.randomPoints(region, 5);

//Produce 1 km buffers, these are the polygons we want to dissolve
var bufferPoly = function(feature) {
  return feature.buffer(1000); 
};

var buffers = randomPoints.map(bufferPoly);
Map.addLayer(buffers, {}, 'buffers');
//print(buffers.limit(10), "Overlapping buffers"); //Each buffer has its own ID but some overlap!


//ESA stack of images
var lulc = ee.Image('users/salem043/ESA_1992_2015').clip(buffsUnion);
//print(lulc, "Land cover data global raw");

//Subset and name bands for clarity
var lulcYrSub = lulc.select(['b9', 'b10', 'b11', 'b12', 'b13', 
'b14', 'b15', 'b16', 'b17', 'b18', 'b19', 'b20', 'b21'], ["lc_2000", "lc_2001", 
'lc_2002', 'lc_2003', 'lc_2004', 'lc_2005', 'lc_2006', 'lc_2007', 'lc_2008',
'lc_2009', 'lc_2010', 'lc_2011', 'lc_2012']);
print(lulcYrSub);

//Subset 2000 band
var lulc_2000 = lulcYrSub.select(["lc_2000"]);
print(lulc_2000);


// lulc types we want to obtain counts for
var lulcClasses = ee.List([0, 10, 11, 12, 20, 30, 40, 50, 60, 61, 62, 70, 71, 72, 80,
81, 82, 90, 100, 110, 120, 121, 122, 130, 140, 150, 152, 153, 160, 170, 180, 190,
200, 201, 202, 210, 220]);

var years = ee.List.sequence(2000, 2012);

//This function will give us the number of pixels within the buffer of each LULC class
//for the 2000 band

var buffer_counts = buffers.map(function(feature){ //Map over the FC
  var mdata = lulcClasses.iterate(function(i, dictin){ //Start a function that iterates over the list
    var thisLC = i ; //Name an object which represents the item in the list
    var varName = ee.String('lulc2000').cat(ee.Number(thisLC).int()); //Define a variable name that will store which lulc it is
    var lulc_thisLC = lulc_2000.remap([i], [1], null); //Remap st. only lulc of that type are 1 and everything else is zero
    var dict = lulc_thisLC.rename(varName) //Rename the remapped object and perform a count reducer
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100});
    return ee.Dictionary(dictin).combine(dict); //Returns the variable
  }, ee.Dictionary()) ;
  return feature.set(mdata);
});

print(buffer_counts.limit(3), "Tile results");
