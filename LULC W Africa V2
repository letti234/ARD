////////////////////////////////////////////////////////////////////
//
//  Load all data 
//
////////////////////////////////////////////////////////////////////

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts');

//Ecoregions data
var ecodata = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017');

//Camp data
var camps = ee.FeatureCollection('users/salem043/allcampwide');
//Map.addLayer(camps);


var campFilter = ee.Filter.inList('country', ['Senegal', 'Gambia',
'Guinea-Bissau', 'Guinea', 'Sierra Leone', 'Liberia', 'Ivory Coast', 'Mali',
'Burkina Faso', 'Ghana',
'Togo', 'Benin', 'Niger', 'Nigeria']);
var filteredArea = camps.filter(campFilter);



//30 km buffers around camps
var bufferPoly = function(feature) {
  return feature.buffer(30000);  
};

var buffers = filteredArea.map(bufferPoly);

var buffsSample=buffers.union();
print(buffsSample, "buffers multi");


//Map.addLayer(buffsSample, {}, 'buffers');
//print(buffers, "camp buffers");


//ESA stack of images
var lulc = ee.Image('users/salem043/ESA_1992_2015').clip(buffsSample);
//print(lulc, "Land cover data global raw");

//Subset and name bands for clarity
var lulcYrSub = lulc.select(['b9', 'b10', 'b11', 'b12', 'b13', 
'b14', 'b15', 'b16', 'b17', 'b18', 'b19', 'b20', 'b21'], ["lc_2000", "lc_2001", 
'lc_2002', 'lc_2003', 'lc_2004', 'lc_2005', 'lc_2006', 'lc_2007', 'lc_2008',
'lc_2009', 'lc_2010', 'lc_2011', 'lc_2012']);
print(lulcYrSub, "LULC subset 2000-2012");


////////////////////////////////////////////////////////////////////
//
//  Generate tiles to correspond with other data
//
////////////////////////////////////////////////////////////////////








////////////////////////////////////////////////////////////////////
//
//  Calculate number of pixels in each tile that have different
//  properties (ex: water, settlement, etc.)
//
////////////////////////////////////////////////////////////////////

// all years in GFC image 
var lcClass = ee.List(0, 10, 11, 12, 20, 30, 40, 50, 60, 61, 62, 70, 71, 72, 80,
81, 82, 90, 100, 110, 120, 121, 122, 130, 140, 150, 152, 153, 160, 170, 180, 190,
200, 201, 202, 210, 220);

// indices for years you want to calculate stats for (2001 to 2014) 
var indices = ee.List(0, 10, 11, 12, 20, 30, 40, 50, 60, 61, 62, 70, 71, 72, 80,
81, 82, 90, 100, 110, 120, 121, 122, 130, 140, 150, 152, 153, 160, 170, 180, 190,
200, 201, 202, 210, 220);

// map over feature collection 
var tiles_new = tiles.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
  var mdata = indices.iterate(function(i, dictin){
    
    // get year for this iteration 
    var thisLc = lcClass.get(i)

    // create property name for this year (e.g. "loss2001" for first iteration)
    var bandname = ee.String('loss').cat(ee.Number(thisLc).int())
    
    var countPixelsThisLc // assign to this variable GFC image masked to this year 
      
    var dict = countPixelsThisLc
    
      // rename band such that the end dictionary key is unique to this year 
      .rename(bandname)
      
      // get zonal statistics 
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100})
      
    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict)
    
  }, ee.Dictionary()) // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(mdata)

})
