////////////////////////////////////////////////////////////////////
//
//  Load all data 
//
////////////////////////////////////////////////////////////////////

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts');

//Ecoregions data
var ecodata = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017');

//Camp data
var camps = ee.FeatureCollection('users/salem043/allcampwide');
//Map.addLayer(camps);


var campFilter = ee.Filter.inList('country', ['Senegal', 'Gambia',
'Guinea-Bissau', 'Guinea', 'Sierra Leone', 'Liberia', 'Ivory Coast', 'Mali',
'Burkina Faso', 'Ghana',
'Togo', 'Benin', 'Niger', 'Nigeria']);
var filteredArea = camps.filter(campFilter);



//30 km buffers around camps
var bufferPoly = function(feature) {
  return feature.buffer(30000);  
};

var buffers = filteredArea.map(bufferPoly);

var buffsUnion=buffers.union();
print(buffsUnion, "buffers multi");


//Map.addLayer(buffsSample, {}, 'buffers');
//print(buffers, "camp buffers");


//ESA stack of images
var lulc = ee.Image('users/salem043/ESA_1992_2015').clip(buffsUnion);
//print(lulc, "Land cover data global raw");

//Subset and name bands for clarity
var lulcYrSub = lulc.select(['b9', 'b10', 'b11', 'b12', 'b13', 
'b14', 'b15', 'b16', 'b17', 'b18', 'b19', 'b20', 'b21'], ["lc_2000", "lc_2001", 
'lc_2002', 'lc_2003', 'lc_2004', 'lc_2005', 'lc_2006', 'lc_2007', 'lc_2008',
'lc_2009', 'lc_2010', 'lc_2011', 'lc_2012']);
print(lulcYrSub);

var lulc_2000 = lulcYrSub.select(["lc_2000"]);
print(lulc_2000);

////////////////////////////////////////////////////////////////////
//
//  Generate tiles to correspond with other data
//
////////////////////////////////////////////////////////////////////

var tiles = tile(buffsUnion, 0.01); 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//print(tiles.limit(10), "Baseline tiles");





////////////////////////////////////////////////////////////////////
//
//  Calculate number of pixels in each tile that have different
//  properties (ex: water, settlement, etc.)
//
////////////////////////////////////////////////////////////////////

// lulc types we want to obtain counts for
var indices = ee.List([0, 10, 11, 12, 20, 30, 40, 50, 60, 61, 62, 70, 71, 72, 80,
81, 82, 90, 100, 110, 120, 121, 122, 130, 140, 150, 152, 153, 160, 170, 180, 190,
200, 201, 202, 210, 220]);


// map over feature collection 
var tiles_new = tiles.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
  var mdata = indices.iterate(function(i, dictin){
    
    // get year for this iteration 
    var thisLC = i ;

    // create property name for this year (e.g. "loss2001" for first iteration)
    var bandname = ee.String('lulc').cat(ee.Number(thisLC).int()) ;
    
    var lulc_thisLC = lulc_2000.remap([i], [1], null);
    
    var dict = lulc_2000
    
      // rename band such that the end dictionary key is unique to this year 
      .rename(bandname)
      
      // get zonal statistics 
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100})
      
    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict)
    
  }, ee.Dictionary()) // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(mdata)

})

print(tiles_new.limit(3), "Tile results");



