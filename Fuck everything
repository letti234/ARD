//REFUGEE CAMPS AND DEFORESTATION V9
//COLETTE SALEMI
//23 NOV 2019

//Full version


//-------------------------------------------------------------
// 
//    DATA UPLOAD AND CLEANING
//  
//-------------------------------------------------------------

//Hansen Global Forest Change data
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015');

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts')

//Ecoregions data
var ecodata = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017')
print('ecoregions', ecodata.first());


var gfc2014_c = gfc2014.clip(SSA);

//Camp dataset
var camps = ee.FeatureCollection('users/salem043/allcampwide');
Map.addLayer(camps, {color: 'red'}, 'camps');
print(camps);

//50 km  buffer around camps
var bufferPoly = function(feature) {
  return feature.buffer(50000);   
};

var buffers = camps.map(bufferPoly);
//Map.addLayer(buffers, {color: 'yellow'}, 'buffers');

//Randomly select 100 pixels
var points = ee.FeatureCollection.randomPoints(buffers, 1000000);


Map.addLayer(points, {color: 'blue'}, 'points');


//-------------------------------------------------------------
//
//OBTAIN GFC DATA FOR THE MAIN FEATURE COLLECTION
//By Year
//
//-------------------------------------------------------------
 
 
var sampledPoints = points.map(function(feature) {
  return feature.set(gfc2014.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

var sample = sampledPoints.select(
    ['lossyear', 'treecover2000']           
);

print("Final forest loss data", sample.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2001
//
//-------------------------------------------------------------

// local function
var addGroups = function(feature) {
  var statsFormatted = ee.List(feature.get('groups'))
  .map(function(el) {
    var d = ee.Dictionary(el);
    return [ee.Number(d.get('group')), d.get('sum')];
  });
  var statsDictionary = ee.Dictionary(statsFormatted.flatten());

return feature.set(statsDictionary);
};

var keys = ee.List.sequence(0,2,1).map(function(year){
  return ee.Number(null);
});
var preSetPropsAfrica = points.map(function(feat){
  return feat.set(ee.Dictionary.fromLists(keys,ee.List.repeat(0,15)));
});


var camps_01 = camps.filterMetadata('open_2001', 'equals', 1);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: preSetPropsAfrica, 
  secondary: camps_01, 
  condition: spatialFilter
});

var withNearestDist_01 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_01 = withNearestDist_01.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});


var campdata_01_t = campdata_01.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_01 = campdata_01_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2001", finalcamp_01.limit(10));



//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2002
//
//-------------------------------------------------------------

var camps_02 = camps.filterMetadata('open', 'equals', 2002);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_02, 
  condition: spatialFilter
});

var withNearestDist_02 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_02 = withNearestDist_02.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2002 camps", campdata_02.limit(10));

var campdata_02_t = campdata_02.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_02 = campdata_02_t.select(
    [ 'campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2002", finalcamp_02.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2003
//
//-------------------------------------------------------------

var camps_03 = camps.filterMetadata('open', 'equals', 2003);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_03, 
  condition: spatialFilter
});

var withNearestDist_03 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_03 = withNearestDist_03.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2003 camps", campdata_03.limit(10));

var campdata_03_t = campdata_03.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_03 = campdata_03_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2003", finalcamp_03.limit(10));


//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2004
//
//-------------------------------------------------------------

var camps_04 = camps.filterMetadata('open', 'equals', 2004);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_04, 
  condition: spatialFilter
});

var withNearestDist_04 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_04 = withNearestDist_04.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2004 camps", campdata_04.limit(10));

var campdata_04_t = campdata_04.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_04 = campdata_04_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2004", finalcamp_04.limit(10));


//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2005
//
//-------------------------------------------------------------

var camps_05 = camps.filterMetadata('open', 'equals', 2005);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_05, 
  condition: spatialFilter
});

var withNearestDist_05 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_05 = withNearestDist_05.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2005 camps", campdata_05.limit(10));

var campdata_05_t = campdata_05.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_05 = campdata_05_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2005", finalcamp_05.limit(10));


//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2006
//
//-------------------------------------------------------------

var camps_06 = camps.filterMetadata('open', 'equals', 2006);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_06, 
  condition: spatialFilter
});

var withNearestDist_06 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_06 = withNearestDist_06.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2006 camps", campdata_06.limit(10));

var campdata_06_t = campdata_06.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_06 = campdata_06_t.select(
    [ 'campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2006", finalcamp_06.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2007
//
//-------------------------------------------------------------

var camps_07 = camps.filterMetadata('open', 'equals', 2007);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_07, 
  condition: spatialFilter
});

var withNearestDist_07 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_07 = withNearestDist_07.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2007 camps", campdata_07.limit(10));

var campdata_07_t = campdata_07.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_07 = campdata_07_t.select(
    [ 'campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2007", finalcamp_07.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2008
//
//-------------------------------------------------------------

var camps_08 = camps.filterMetadata('open', 'equals', 2008);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_08, 
  condition: spatialFilter
});

var withNearestDist_08 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_08 = withNearestDist_08.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2008 camps", campdata_08.limit(10));

var campdata_08_t = campdata_08.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_08 = campdata_08_t.select(
    [ 'campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2008", finalcamp_08.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2009
//
//-------------------------------------------------------------

var camps_09 = camps.filterMetadata('open', 'equals', 2009);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_09, 
  condition: spatialFilter
});

var withNearestDist_09 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_09 = withNearestDist_09.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2009 camps", campdata_09.limit(10));

var campdata_09_t = campdata_09.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_09 = campdata_09_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2009", finalcamp_09.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2010
//
//-------------------------------------------------------------

var camps_10 = camps.filterMetadata('open', 'equals', 2010);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_10, 
  condition: spatialFilter
});

var withNearestDist_10 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_10 = withNearestDist_10.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2010 camps", campdata_10.limit(10));

var campdata_10_t = campdata_10.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_10 = campdata_10_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2010", finalcamp_10.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2011
//
//-------------------------------------------------------------

var camps_11 = camps.filterMetadata('open', 'equals', 2011);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_11, 
  condition: spatialFilter
});

var withNearestDist_11 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_11 = withNearestDist_11.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2011 camps", campdata_11.limit(10));

var campdata_11_t = campdata_11.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_11 = campdata_11_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2011", finalcamp_11.limit(10));

//-------------------------------------------------------------
//
//    LINEAR DISTANCE BETWEEN RANDOM POINTS AND NEAREST CAMP
//    2012
//
//-------------------------------------------------------------

var camps_12 = camps.filterMetadata('open', 'equals', 2012);

var spatialFilter = ee.Filter.withinDistance({
  distance: 50000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: points, 
  secondary: camps_12, 
  condition: spatialFilter
});

var withNearestDist_12 = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var campdata_12 = withNearestDist_12.map(function(f) {
  var nearestCamp = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('campid');
  return f.set('campid', nearestCamp);
});

print("2012 camps", campdata_12.limit(10));

var campdata_12_t = campdata_12.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5', neighs.filter(filt).size());
  return(pt);
});


var finalcamp_12 = campdata_12_t.select(
    ['campid', 'nearestDist',
    'neighsSize10', 'neighsSize15', 'neighsSize20', 
    'neighsSize5']           
);

print("Final camp sample 2012", finalcamp_12.limit(10));

//-------------------------------------------------------------
//
//EXTRACTING INFORMATION FROM THE SSA SHAPEFILE 
//
//-------------------------------------------------------------


//Specify the properties that I want to copy from the SSA shapefile
var properties = ["ADM0","ADM1", "ADM2"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(points, SSA, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var SSAdata = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

//-------------------------------------------------------------
//
//EXTRACTING INFORMATION FROM THE ECOREGIONS SHAPEFILE 
//
//-------------------------------------------------------------

//Specify the properties that I want to copy from the SSA shapefile
var properties = ["BIOME_NAME","ECO_NAME", "systemindex"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(points, ecodata, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecosample = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print('sample extract', ecosample.first());



//-------------------------------------------------------------
//
//EXPORT
//
//-------------------------------------------------------------


Export.table.toDrive(finalcamp_01, "camp_data_01", "Deforestation");
Export.table.toDrive(finalcamp_02, "camp_data_02", "Deforestation");
Export.table.toDrive(finalcamp_03, "camp_data_03", "Deforestation");
Export.table.toDrive(finalcamp_04, "camp_data_04", "Deforestation");
Export.table.toDrive(finalcamp_05, "camp_data_05", "Deforestation");
Export.table.toDrive(finalcamp_06, "camp_data_06", "Deforestation");
Export.table.toDrive(finalcamp_07, "camp_data_07", "Deforestation");
Export.table.toDrive(finalcamp_08, "camp_data_08", "Deforestation");
Export.table.toDrive(finalcamp_09, "camp_data_09", "Deforestation");
Export.table.toDrive(finalcamp_10, "camp_data_10", "Deforestation");
Export.table.toDrive(finalcamp_11, "camp_data_11", "Deforestation");
Export.table.toDrive(finalcamp_12, "camp_data_12", "Deforestation");

Export.table.toDrive({
 collection: sample,
 description:'GFC_data',
fileFormat: 'csv'
 });


Export.table.toDrive({
 collection: SSAdata,
 description:'SSA_data',
fileFormat: 'csv'
 });


Export.table.toDrive({
 collection: ecosample,
 description:'ecoregion_sample',
fileFormat: 'csv'
 });
 
