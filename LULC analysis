////////////////////////////////////////////////////////////////////
//
//  Load all data 
//
////////////////////////////////////////////////////////////////////

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts')

//Ecoregions data
var ecodata = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017');

//Camp data
var camps = ee.FeatureCollection('users/salem043/allcampwide');
Map.addLayer(camps);

//30 km buffers around camps
var bufferPoly = function(feature) {
  return feature.buffer(30000);  
};

var buffers = camps.map(bufferPoly);
Map.addLayer(buffers, {}, 'buffers');
print(buffers, "camp buffers");

//ESA stack of images
var lulc = ee.Image('users/salem043/ESA_1992_2015').clip(buffers);
print(lulc, "Land cover data global raw");

//Subset and name bands for clarity
var lulcYrSub = lulc.select(['b9', 'b10', 'b11', 'b12', 'b13', 
'b14', 'b15', 'b16', 'b17', 'b18', 'b19', 'b20', 'b21'], ["lc_2000", "lc_2001", 
'lc_2002', 'lc_2003', 'lc_2004', 'lc_2005', 'lc_2006', 'lc_2007', 'lc_2008',
'lc_2009', 'lc_2010', 'lc_2011', 'lc_2012']);
print(lulcYrSub, "LULC subset 2000-2012");

////////////////////////////////////////////////////////////////////
//
//  Create feature collection of pixel centroids.
//  Extract LULC data for each  centroid
//
////////////////////////////////////////////////////////////////////

//Pick first band 
var demomap = lulc.select(["b1"]);

//Obtain pixel centroids for first band
var vectors = demomap.sample({
  region: buffers,
  geometries: true,  // this tells GEE to use pixel centroids
});

print(vectors.limit(10), "pixel centroids");

//Find centroid's LULC 2000-2012 
var vectorGFC = vectors.map(function(feature) {
  return feature.set(lulcYrSub.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

print(vectorGFC.limit(10), "GFC data for centroids");

////////////////////////////////////////////////////////////////////
//
//  Get centroid biome and ADM
//
////////////////////////////////////////////////////////////////////

//Specify the properties that I want to copy from the SSA shapefile
var properties = ["BIOME_NAME","ECO_NAME", "systemindex"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(vectorGFC, ecodata, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecosample = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print(ecosample.limit(10));


//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts')


//Specify the properties that I want to copy from the SSA shapefile
var properties2 = ["ADM0","ADM1", "ADM2"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(ecosample, SSA, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var SSAdata = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties2)).select(properties2);
});

print(SSAdata.limit(10), "SSA ADM of centroid");

//Find centroid distance to nearest camp each year


