////////////////////////////////////////////////////////////////////
//
//  Load all data 
//
////////////////////////////////////////////////////////////////////

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts')

//Ecoregions data
var ecodata = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017');

//Camp data
var camps = ee.FeatureCollection('users/salem043/allcampwide');
//Map.addLayer(camps);


var campFilter = ee.Filter.inList('country', ['Burundi']);
var filteredArea = camps.filter(campFilter);

//30 km buffers around camps
var bufferPoly = function(feature) {
  return feature.buffer(30000);  
};

var buffers = filteredArea.map(bufferPoly);

Map.addLayer(buffers, {}, 'buffers');
//print(buffers, "camp buffers");

//ESA stack of images
var lulc = ee.Image('users/salem043/ESA_1992_2015').clip(buffers);
//print(lulc, "Land cover data global raw");

//Subset and name bands for clarity
var lulcYrSub = lulc.select(['b9', 'b10', 'b11', 'b12', 'b13', 
'b14', 'b15', 'b16', 'b17', 'b18', 'b19', 'b20', 'b21'], ["lc_2000", "lc_2001", 
'lc_2002', 'lc_2003', 'lc_2004', 'lc_2005', 'lc_2006', 'lc_2007', 'lc_2008',
'lc_2009', 'lc_2010', 'lc_2011', 'lc_2012']);
print(lulcYrSub, "LULC subset 2000-2012");

////////////////////////////////////////////////////////////////////
//
//  Create feature collection of pixel centroids.
//  Extract LULC data for each  centroid
//
////////////////////////////////////////////////////////////////////

//Pick first band 
var demomap = lulc.select(["b1"]);

//Obtain pixel centroids for first band
var vectors = demomap.sample({
  region: buffers,
  geometries: true,  // this tells GEE to use pixel centroids
});

//print(vectors.limit(10), "pixel centroids");

//Find centroid's LULC 2000-2012 
var vectorGFC = vectors.map(function(feature) {
  return feature.set(lulcYrSub.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

print(vectorGFC.limit(10), "LULC data for centroids");

////////////////////////////////////////////////////////////////////
//
//  Get centroid biome and ADM
//
////////////////////////////////////////////////////////////////////

//Specify the properties that I want to copy from the SSA shapefile
var properties = ["BIOME_NAME","ECO_NAME", "systemindex"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(vectorGFC, ecodata, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecosample = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print(ecosample.limit(10));


//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts')


//Specify the properties that I want to copy from the SSA shapefile
var properties2 = ["ADM0","ADM1", "ADM2"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(ecosample, SSA, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var SSAdata = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties2)).select(properties2);
});

print(SSAdata.limit(10), "SSA ADM of centroid");


////////////////////////////////////////////////////////////////////
//
//  Centroid distance to nearest camp by year
//
////////////////////////////////////////////////////////////////////


var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

//2001
var joined_1 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: vectorGFC, 
  secondary: camps.filterMetadata('open_2001', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist = joined_1.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_1 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2001', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2001', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2001', neighs.filter(filt).size());
  return(pt);
});

var campcount_1 =  pointdata_withbandcounts_1.select([
  'neighsSize1_2001', 'neighsSize2_2001', 'neighsSize3_2001',
    'neighsSize4_2001', 'neighsSize5_2001', 'neighsSize6_2001',
    'neighsSize7_2001', 'neighsSize8_2001', 'neighsSize9_2001',
    'neighsSize10_2001', 'neighsSize11_2001', 'neighsSize12_2001',
    'neighsSize13_2001', 'neighsSize14_2001', 'neighsSize15_2001',
    'neighsSize16_2001', 'neighsSize17_2001', 'neighsSize18_2001',
    'neighsSize19_2001', 'neighsSize20_2001']);

print(campcount_1.limit(10), "camp data");


//Num. camps at different distances in 2001/////////////////////

var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});



//2002
var joined_2 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: campcount_1, 
  secondary: camps.filterMetadata('open_2002', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_2.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_2 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2002', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2002', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2002', neighs.filter(filt).size());
  return(pt);
});


//2003
var joined_3 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_2, 
  secondary: camps.filterMetadata('open_2003', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_3.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_3 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2003', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2003', neighs.filter(filt).size());
  return(pt);
});

print(pointdata_withbandcounts_3.limit(2), "camp count 2003")  



//2004
var joined_4 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_3, 
  secondary: camps.filterMetadata('open_2004', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_4.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_4 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2004', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2004', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2004', neighs.filter(filt).size());
  return(pt);
});


print(pointdata_withbandcounts_4.limit(2))

//2005
var joined_5 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_4, 
  secondary: camps.filterMetadata('open_2005', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_5.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_5 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2005', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2005', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2005', neighs.filter(filt).size());
  return(pt);
});


print(pointdata_withbandcounts_5.limit(2), "camp count 2005")  ;


//2006
var joined_6 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_5, 
  secondary: camps.filterMetadata('open_2006', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_6.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_6 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2006', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2006', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2006', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_6, "camp count 2006")  


//2007
var joined_7 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_6, 
  secondary: camps.filterMetadata('open_2007', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_7.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_7 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2007', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2007', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2007', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_7, "camp count 2007")  

//2008
var joined_8 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_7, 
  secondary: camps.filterMetadata('open_2008', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_8.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_8 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2008', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2008', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2008', neighs.filter(filt).size());
  return(pt);
});


//2009
var joined_9 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_8, 
  secondary: camps.filterMetadata('open_2009', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_9.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_9 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2009', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2009', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2009', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_9, "camp count 2009")  ;


//2010
var joined_10 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_9, 
  secondary: camps.filterMetadata('open_2010', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_10.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_10 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2010', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2010', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2010', neighs.filter(filt).size());
  return(pt);
});

//2011
var joined_11 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_10, 
  secondary: camps.filterMetadata('open_2011', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_11.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_11 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2011', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2011', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2011', neighs.filter(filt).size());
  return(pt);
});

//print(campcount_11, "camo count 2011")  

//2012
var joined_12 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: pointdata_withbandcounts_11, 
  secondary: camps.filterMetadata('open_2012', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_12.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_12 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  pt=pt.set('neighsSize2_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 3000);
  pt=pt.set('neighsSize3_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 4000);
  pt=pt.set('neighsSize4_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 5000);
  pt=pt.set('neighsSize5_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 6000);
  pt=pt.set('neighsSize6_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 7000);
  pt=pt.set('neighsSize7_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 8000);
  pt=pt.set('neighsSize8_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 9000);
  pt=pt.set('neighsSize9_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
  pt=pt.set('neighsSize10_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 11000);
    pt=pt.set('neighsSize11_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 12000);
  pt=pt.set('neighsSize12', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 13000);
  pt=pt.set('neighsSize13_2012', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 14000);
  pt=pt.set('neighsSize14_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
  pt=pt.set('neighsSize15_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 16000);
  pt=pt.set('neighsSize16_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 17000);
  pt=pt.set('neighsSize17_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 18000);
  pt=pt.set('neighsSize18_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 19000);
  pt=pt.set('neighsSize19_2012', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
  pt=pt.set('neighsSize20_2012', neighs.filter(filt).size());
  return(pt);
});

print(pointdata_withbandcounts_12.limit(10), "Full camp distance data");

//Determine centroid remoteness






//Exporting

var toyFilter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
});

// Define the join.
var innerJoin = ee.Join.simple();

// Apply the join.
var data2 = innerJoin.apply(pointdata_withbandcounts_12, ecosample,  toyFilter);
print(data2.limit(10), "Camp and ecoregion data");

var data3 = innerJoin.apply(SSAdata, vectorGFC, toyFilter);
print(data3.limit(5), "SSA and GFC data");





Export.table.toDrive(pointdata_withbandcounts_12, 
"LULCCampDistance_G1", "deforTilesGEE"); //Distance the nearest camps

Export.table.toDrive(ecosample, 
"LULCbiome_G1", "deforTilesGEE"); //Centroid biomes


Export.table.toDrive(SSAdata, 
"LULCADM_G1", "deforTilesGEE"); //Centroid country, province, district

//Export.table.toDrive(remoteness, "LULCremotenessADMGroup2", "deforTilesGEE");

Export.table.toDrive(vectorGFC, "LULC_G1", "deforTilesGEE");


