//Per capita deforestation rates
//Colette Salemi
//Extension of Refugee Camps and Deforestation project
//Country level


//Country shapefiles
var Africa = ee.FeatureCollection
('users/salem043/Africa_Districts').select("ADM3");
print("Sub-saharan Africa", Africa.limit(5));
Map.addLayer(Africa);

//Hansen Global Forest Change image with multiple bands
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015').clip(Africa);

//Camp location data
var camps = ee.FeatureCollection('users/salem043/allcampsimpleyear');
Map.addLayer(camps, {color: 'red'}, 'camps');
print("camp data", camps);

///////////////////////////////////////////////////////////////////////////
//
//Build a forest loss panel
//
///////////////////////////////////////////////////////////////////////////

var lossImage = gfc2014.select(['loss']); //Raster of pixels lost 2000-2014
//loss quantified in terms of square meters lost
var lossAreaImage = lossImage.multiply(ee.Image.pixelArea()); 


//Identifies the year in which the pixel transitioned
var lossYear = gfc2014.select(['lossyear']);

var lossByYear = lossAreaImage.addBands(lossYear) 
  .reduceRegions({ 
  reducer: ee.Reducer.sum().group({groupField: 1}),
  collection: Africa, 
  scale: 30
});


var addGroups = function(feature) {
  var statsFormatted = ee.List(feature.get('groups'))
  .map(function(el) {
    var d = ee.Dictionary(el);
    return [ee.Number(d.get('group')).format("20%02d"), d.get('sum')];
  });
  var statsDictionary = ee.Dictionary(statsFormatted.flatten());

  return feature.set(statsDictionary);
};

print("Final forest loss df", lossByYear.map(addGroups).limit(2))
lossByYear = lossByYear.map(addGroups)


///////////////////////////////////////////////////////////////////////////
//
//Number of camps in year t - Build a join that creates an
//annual count
//
//
///////////////////////////////////////////////////////////////////////////

//The join would be, ignoring years

var spatialFilter = 
  ee.Filter.intersects({
    leftField: '.geo',
    rightField: '.geo'
  });
  
var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
}).apply({
  primary: Africa, 
  secondary: camps, 
  condition: spatialFilter
});

var camp_count = joined.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.bounds(Africa);
  pt=pt.set('no_camps', neighs.filter(filt).size());
  return(pt);
});

print("Camps per sub-district", camp_count.limit(5));



var years_of_camps = ee.List.sequence(2001, 2012);
var counts = Africa.map(function(feature) {
  var counts = years_of_camps.map(function(year) {
    var camp_location = camps
      .filter(ee.Filter.eq("year", year))
      .filterBounds(feature.geometry());
    var key = ee.String('year').cat(ee.String(ee.Number(year).int()))
    return ee.List([key, camp_location.size()]);  
  }).flatten()
  return feature.set(ee.Dictionary(counts))
});

print("Annual counts", counts.limit(20));
///////////////////////////////////////////////////////////////////////////
//
//Build a population estimate panel
//
///////////////////////////////////////////////////////////////////////////


var Allpop = ee.ImageCollection("WorldPop/GP/100m/pop");

var topimg=Allpop.limit(10);
print("First pop entries", topimg);


//2000
var Allpop00 = Allpop.filterMetadata('year', 'equals', 2000);
var pop00 = Allpop00.reduce(ee.Reducer.sum());
var pop_2000 = Africa.map(function(feature) {
  return feature.set(pop00.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print("2000 dataframe for pop", pop_2000.limit(10));

//2001
var Allpop01 = Allpop.filterMetadata('year', 'equals', 2001);
var pop01 = Allpop01.reduce(ee.Reducer.sum());
var pop_2001 = Africa.map(function(feature) {
  return feature.set(pop01.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print("2001 dataframe for pop", pop_2001.limit(10));

//2002
var Allpop02 = Allpop.filterMetadata('year', 'equals', 2002);
var pop02 = Allpop02.reduce(ee.Reducer.sum());
var pop_2002 = Africa.map(function(feature) {
  return feature.set(pop02.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2003
var Allpop03 = Allpop.filterMetadata('year', 'equals', 2003);
var pop03 = Allpop03.reduce(ee.Reducer.sum());
var pop_2003 = Africa.map(function(feature) {
  return feature.set(pop03.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2004
var Allpop04 = Allpop.filterMetadata('year', 'equals', 2004);
var pop04 = Allpop04.reduce(ee.Reducer.sum());
var pop_2004 = Africa.map(function(feature) {
  return feature.set(pop04.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2005
var Allpop05 = Allpop.filterMetadata('year', 'equals', 2005);
var pop05 = Allpop05.reduce(ee.Reducer.sum());
var pop_2005 = Africa.map(function(feature) {
  return feature.set(pop05.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2006
var Allpop06 = Allpop.filterMetadata('year', 'equals', 2006);
var pop06 = Allpop06.reduce(ee.Reducer.sum());
var pop_2006 = Africa.map(function(feature) {
  return feature.set(pop06.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2007
var Allpop07 = Allpop.filterMetadata('year', 'equals', 2007);
var pop07 = Allpop07.reduce(ee.Reducer.sum());
var pop_2007 = Africa.map(function(feature) {
  return feature.set(pop07.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2008
var Allpop08 = Allpop.filterMetadata('year', 'equals', 2008);
var pop08 = Allpop08.reduce(ee.Reducer.sum());
var pop_2008 = Africa.map(function(feature) {
  return feature.set(pop08.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2009
var Allpop09 = Allpop.filterMetadata('year', 'equals', 2009);
var pop09 = Allpop09.reduce(ee.Reducer.sum());
var pop_2009 = Africa.map(function(feature) {
  return feature.set(pop09.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2010
var Allpop10 = Allpop.filterMetadata('year', 'equals', 2010);
var pop10 = Allpop10.reduce(ee.Reducer.sum());
var pop_2010 = Africa.map(function(feature) {
  return feature.set(pop10.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2011
var Allpop11 = Allpop.filterMetadata('year', 'equals', 2011);
var pop11 = Allpop11.reduce(ee.Reducer.sum());
var pop_2011 = Africa.map(function(feature) {
  return feature.set(pop11.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print(pop_2011.limit(10));


//2012
var Allpop12 = Allpop.filterMetadata('year', 'equals', 2012);
var pop12 = Allpop12.reduce(ee.Reducer.sum());
var pop_2012 = Africa.map(function(feature) {
  return feature.set(pop12.reduceRegion({
    reducer: 'sum',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});


///////////////////////////////////////////////////////////////////////////
//
//Annual mean nighttime lights panel
//
///////////////////////////////////////////////////////////////////////////


var nightlights = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')
                  .filter(ee.Filter.date('2000-01-01', '2012-12-31'))
                  .filterBounds(Africa).select("stable_lights")
                  .map(function(image){return image.clip(Africa)});

print("Raw nightlights data", nightlights);


//2001
var lights_01 = nightlights.filterMetadata('system:index', 'equals', 'F152001');
var light01 = lights_01.reduce(ee.Reducer.mean());
var light_2001 = Africa.map(function(feature) {
  return feature.set(light01.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2002
var lights_02 = nightlights.filterMetadata('system:index', 'equals', 'F152002');
var light02 = lights_02.reduce(ee.Reducer.mean());
var light_2002 = Africa.map(function(feature) {
  return feature.set(light02.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

print("2002 mean lights", light_2002.limit(10));


//2003
var lights_03 = nightlights.filterMetadata('system:index', 'equals', 'F152003');
var light03 = lights_03.reduce(ee.Reducer.mean());
var light_2003 = Africa.map(function(feature) {
  return feature.set(light03.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});


//2004
var lights_04 = nightlights.filterMetadata('system:index', 'equals', 'F152004');
var light04 = lights_04.reduce(ee.Reducer.mean());
var light_2004 = Africa.map(function(feature) {
  return feature.set(light04.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2005
var lights_05 = nightlights.filterMetadata('system:index', 'equals', 'F152005');
var light05 = lights_05.reduce(ee.Reducer.mean());
var light_2005 = Africa.map(function(feature) {
  return feature.set(light05.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2006
var lights_06 = nightlights.filterMetadata('system:index', 'equals', 'F152006');
var light06 = lights_06.reduce(ee.Reducer.mean());
var light_2006 = Africa.map(function(feature) {
  return feature.set(light06.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});


//2007
var lights_07 = nightlights.filterMetadata('system:index', 'equals', 'F152007');
var light07 = lights_07.reduce(ee.Reducer.mean());
var light_2007 = Africa.map(function(feature) {
  return feature.set(light07.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});

//2008
var lights_08 = nightlights.filterMetadata('system:index', 'equals', 'F152008');
var light08 = lights_08.reduce(ee.Reducer.mean());
var light_2008 = Africa.map(function(feature) {
  return feature.set(light08.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
    maxPixels: 1e12,
  }));
});



///////////////////////////////////////////////////////////////////////////
//
//Export
//
///////////////////////////////////////////////////////////////////////////

Export.table.toDrive(light_2001, "Lights_2001", "Deforestation")
Export.table.toDrive(light_2002, "Lights_2002", "Deforestation")
Export.table.toDrive(light_2003, "Lights_2003", "Deforestation")
Export.table.toDrive(light_2004, "Lights_2004", "Deforestation")
Export.table.toDrive(light_2005, "Lights_2005", "Deforestation")
Export.table.toDrive(light_2006, "Lights_2006", "Deforestation")
Export.table.toDrive(light_2007, "Lights_2007", "Deforestation")
Export.table.toDrive(light_2008, "Lights_2008", "Deforestation")



Export.table.toDrive(counts, "Annual_camp_counts_subd", "Deforestation");
Export.table.toDrive(pop_2000, "Annual_pop_2000_subd", "Deforestation");
Export.table.toDrive(pop_2001, "Annual_pop_2001_subd", "Deforestation");
Export.table.toDrive(pop_2002, "Annual_pop_2002_subd", "Deforestation");
Export.table.toDrive(pop_2003, "Annual_pop_2003_subd", "Deforestation");
Export.table.toDrive(pop_2004, "Annual_pop_2004_subd", "Deforestation");
Export.table.toDrive(pop_2005, "Annual_pop_2005_subd", "Deforestation");
Export.table.toDrive(pop_2006, "Annual_pop_2006_subd", "Deforestation");
Export.table.toDrive(pop_2007, "Annual_pop_2007_subd", "Deforestation");
Export.table.toDrive(pop_2008, "Annual_pop_2008_subd", "Deforestation");
Export.table.toDrive(pop_2009, "Annual_pop_2009_subd", "Deforestation");
Export.table.toDrive(pop_2010, "Annual_pop_2010_subd", "Deforestation");
Export.table.toDrive(pop_2011, "Annual_pop_2011_subd", "Deforestation");
Export.table.toDrive(pop_2012, "Annual_pop_2012_subd", "Deforestation");
Export.table.toDrive(lossByYear, "Annual_forest_loss_subd", "Deforestation");


/////////////////////////////////////////////////////////
//
//Using grids
//
/////////////////////////////////////////////////////////


//Grid for SSA - grids need to be within-country, OR we 
//need to identify which grids are in two countries


