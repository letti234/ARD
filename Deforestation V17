///////////////////////////////////////////////////////////////////////
//
//  Initial data prep
//
///////////////////////////////////////////////////////////////////////

//Read in camp data - this is saved in wide format, with binary indicators
//of whether a camp was open 1999-2016
var camps = ee.FeatureCollection('users/salem043/allcampwide');
Map.addLayer(camps);

var campFilter = ee.Filter.inList('country', ['Sierra Leone']);
var filteredArea = camps.filter(campFilter);

var campRegion=camps.filter(campFilter);
Map.addLayer(campRegion);

//Produce 50 km  buffer around the camps - this the are we are going to study
var bufferPoly = function(feature) {
  return feature.buffer(30000);  //!!Change back to 50k after making sure the border identification works 
};

var buffers = campRegion.map(bufferPoly);
//Map.addLayer(buffers, {}, 'buffers');

var buffsSample=buffers.union();
Map.addLayer(buffsSample, {}, 'buffers dissolved');



//Import Hansen Global Forest Change data
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015');

//Clip GFC down to the subsample buffer
//!!Change this when upscaling
var gfcSample = gfc2014.clip(buffsSample);
//print(gfcSample, "GFC geographic subsample");

//The bands we rely on for our analysis
var gfcSampleCover2000= gfcSample.select(["treecover2000"]);
var gfcSampleMask=gfcSample.select(["datamask"])
var gfcSampleLossYr = gfcSample.select(["lossyear"])


///////////////////////////////////////////////////////////////////////
//
//  Clean the GFC data - use the mask layer to assign all pixels
//  with no data or in bodies of water as NA
//
///////////////////////////////////////////////////////////////////////

//Reclassify 2 = NA and 0 = NA in the mask layer

var gfcSampleMask = gfcSampleMask
.remap([ 1],
       [1], null);
       
//Map.addLayer(gfcSampleMask);

//Mask the mask layer to the two other GEE rasters so that NAs in the
//mask layer are NAs in those rasters
//var gfcSampleCover2000Masked=mask()

var gfc2000CoverMasked = gfcSampleCover2000.updateMask(gfcSampleMask);
//Map.addLayer(gfc2000CoverMasked);

var gfcLossYearMasked  = gfcSampleLossYr.updateMask(gfcSampleMask);
//Map.addLayer(gfcLossYearMasked);

///////////////////////////////////////////////////////////////////////
//
//  Tile production - we'll use these tiles to calculate zonal stats.
//  The tiles are the unit of analysis in our regression
//
///////////////////////////////////////////////////////////////////////

//Tiles below are measured in degrees. (Ugh, but I want meters!)
//0.1 degrees is about 11 km at equator. Kept large for training
//Code courtesty of a kind stranger who offered it on Stack Exchange
//!!Need to figure out how to form these tiles in meters
//!!Downscale tiles to finer resolution when scaling up (0.01, about 1 km)
var tiles = tile(buffsSample, 0.1);

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//print(tiles, "Tile example");

//Map.addLayer(tiles, {}, "tiles");

///////////////////////////////////////////////////////////////////////
//
//  GFC zonal stats
//
///////////////////////////////////////////////////////////////////////


//1. Function counts the number of pixels in each tile

var pixelCounts = tiles.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//Change the property name to avoid issues 
var tileCounts = pixelCounts.select(
    ['treecover2000'], ['number_pixels']            
);

//print("Number of pixels that are not NA", tileCounts);


//2. Function to calculate the mean pct forest cover of tile in 2000

var tileCountsPlusBaseline = tileCounts.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//print("Updated FC", tileCountsPlusBaseline);


//2. Number of pixels with zero FC in 2000

var gfc2000CoverZeroes = gfc2000CoverMasked
.remap([ 0], [1], null);

//print(gfc2000CoverZeroes, "2000 pixels with zero FC");
//Map.addLayer(gfc2000CoverZeroes);

var TileCounts2 = tileCountsPlusBaseline.map(function(feature) {
  return feature.set(gfc2000CoverZeroes.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
    scale: 100,
  }));
});

//print(TileCounts2);

var DataRenamed = TileCounts2.map(function(feat){
  return ee.Feature(feat.geometry(), { 
    numPixelsNoNA: feat.get('number_pixels'),
    numPixelsZeroFC2000: feat.get('remapped'),
    meanPctCover2000: feat.get('treecover2000')
  })
})
print(DataRenamed.limit(10), "renaming");




///////////////////////////////////////////////////////////////////////
//
//  Function that counts pixels that made transition by year
//
///////////////////////////////////////////////////////////////////////


// indices for years you want to calculate stats for (2001 to 2014) 
var indices = ee.List.sequence(1,12)

// map over feature collection 
var tiles_new = tiles.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
  var mdata = indices.iterate(function(i, dictin){
    
    // get year for this iteration 
    var thisyear = i

    // create property name for this year (e.g. "loss2001" for first iteration)
    var bandname = ee.String('loss').cat(ee.Number(thisyear).int())
    
    var gfcLossthisyear = gfcLossYearMasked.remap([i], [1], null);
    
    var dict = gfcLossthisyear
    
      // rename band such that the end dictionary key is unique to this year 
      .rename(bandname)
      
      // get zonal statistics 
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100})
      
    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict)
    
  }, ee.Dictionary()) // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(mdata)

})

print(tiles_new.limit(3));



///////////////////////////////////////////////////////////////////////
//
//  identify grid centroids
//
///////////////////////////////////////////////////////////////////////

//Obtain tile centroids - basically converts our tiles into point data
var getCentroids = function(feature) {
  return feature.set({centralPoint: feature.centroid()});
};

var tileCenter = tiles_new.map(getCentroids);

var tileCentroids = tileCenter.map(function(f) {
  var centroid = ee.Feature(ee.List(f.get('centralPoint')));
  return centroid;
});
Map.addLayer(tileCentroids);

print(tileCentroids.limit(2), 'centroids');






///////////////////////////////////////////////////////////////////////
//
//  Annual camp counts
//
///////////////////////////////////////////////////////////////////////

var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

//2003
var joined_3 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: tileCentroids, 
  secondary: camps.filterMetadata('open_2003', 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined_3.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_3 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set('neighsSize1_2003', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  return(pt);
});

var campcount_3 = pointdata_withbandcounts_3.select(
    ['neighsSize1_2003']
);

print(campcount_3, "camp count 2003")  




// indices for years you want to calculate stats for (2001 to 2014) 
var indexedYears = ee.List.sequence(2001,2012)

// map over feature collection 
var centroids_new = tileCentroids.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
var cdata = indexedYears.iterate(function(i, dictin){


var openYearDummy = ee.String('open_').cat(ee.Number(i).int())
    
var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: tileCentroids, 
  secondary: camps.filterMetadata(openYearDummy, 'equals', 1), 
  condition: spatialFilter
});


var withNearestDist= joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


var firstNeighbor = ee.String('numNeighbors_').cat(ee.Number(i).int())
    
var pointdata_withbandcounts = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 1000);
  pt=pt.set(firstNeighbor, neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 2000);
  return(pt);
});

var dictin = pointdata_withbandcounts.select(
    [firstNeighbor])

    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict)
    
  }, ee.Dictionary()) // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(cdata)

})

print(centroids_new.limit(3));
