var dataset = ee.FeatureCollection('RESOLVE/ECOREGIONS/2017')
print('ecoregions', dataset.first());

var sample = ee.FeatureCollection('users/salem043/samplelatlong')
print('sample', sample.first());

//Specify the properties that I want to copy from the SSA shapefile
var properties = ["BIOME_NAME","ECO_NAME", "systemindex"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(sample, dataset, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecosample = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print('sample extract', ecosample.first());

Export.table.toDrive({
 collection: ecosample,
 description:'ecoregion_sample',
fileFormat: 'csv'
 });
 
 
 var camps = ee.FeatureCollection('users/salem043/camp');
 
 
 //Specify the properties that I want to copy from the SSA shapefile
var properties2 = ["BIOME_NAME","ECO_NAME", "campid"];

 var joinAll2 = ee.Join.saveAll('matched').apply(camps, dataset, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecocamp = joinAll2.map(function(feature){
  var joinedFeat2 =  ee.List(feature.get('matched'));
  var polygon2 = ee.Feature(ee.FeatureCollection(joinedFeat2).first());
  return ee.Feature(feature.copyProperties(polygon2, properties2)).select(properties2);
});

print('camp extract', ecocamp.first());



Export.table.toDrive({
 collection: ecocamp,
 description:'ecoregion_camp',
fileFormat: 'csv'
 });
