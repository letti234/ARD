//Refugees and deforestation analysis
//Tabular data export: Group 2

///////////////////////////////////////////////////////////////////////
//
//  Initial data prep
//
///////////////////////////////////////////////////////////////////////

//Read in camp data - this is saved in wide format, with binary indicators
//of whether a camp was open 1999-2016
var camps = ee.FeatureCollection('users/salem043/allcampwidev2');

//Map.addLayer(camps);

//Sub-Saharan Africa administrative district shapefile
var SSA = ee.FeatureCollection('users/salem043/Africa_Districts');

var campFilter = ee.Filter.inList('country', ['Chad',
'CAR', 'Sudan', 'South Sudan', 'Ethiopia',
'Rwanda', 'Burundi', 'DRC', 'Tanzania', 'Rep. Congo',
]);
var filteredArea = camps.filter(campFilter);

var campRegion=camps.filter(campFilter);

///////////////////////////////////////////////////////////////////////
//
//  Create dissolved buffer FC 
//
///////////////////////////////////////////////////////////////////////

//Produce 30 km  buffer around the camps - this the are we are going to study
var bufferPoly = function(feature) {
  return feature.buffer(30000);  //!!Change back to 50k after making sure the border identification works 
};

var buffers = campRegion.map(bufferPoly);

var buffsUnion = buffers.union();

///////////////////////////////////////////////////////////////////////
//
//  Tile production - we'll use these tiles to calculate zonal stats.
//  The tiles are the unit of analysis in our regression
//
///////////////////////////////////////////////////////////////////////


var tiles = tile(buffsUnion, 0.5); 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

///print(tiles.limit(10), "Baseline tiles");

//Map.addLayer(tiles, {}, "tiles");


///////////////////////////////////////////////////////////////////////
//
//  GFCC DATA 2000
//
///////////////////////////////////////////////////////////////////////

var gfcc_2000 = ee.ImageCollection('NASA/MEASURES/GFCC/TC/v3')
      .filter(ee.Filter.date('2000-01-01', '2000-12-31'))
      .select('tree_canopy_cover').mosaic();

print(gfcc_2000);

//Mean pct FC per tile 2000
var mean_2000 = tiles.map(function(feature) {
  return feature.set(gfcc_2000.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 30
  }));
});

Map.addLayer(gfcc_2000)


var pct_2000 = mean_2000.select(['tree_canopy_cover'], ['pct_2000']);
print(pct_2000.limit(10));

//Number of tiles with 50+ FC 2000
var fifty_2000 = gfcc_2000.gte(50).and(gfcc_2000.lte(100));

var count50_2000 = pct_2000.map(function(feature) {
  return feature.set(fifty_2000.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});

var pct50_2000 = count50_2000.select(['pct_2000', 'tree_canopy_cover_mean'], 
['pct_2000', 'plus50_2000']);

//Number of tiles with 10+ FC 2000
var ten_2000 = gfcc_2000.gte(10).and(gfcc_2000.lte(100));

var count10_2000 = pct50_2000.map(function(feature) {
  return feature.set(ten_2000.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: feature.geometry(),
    scale: 30
  }));
});

var gfccFull_2000 = count10_2000.select(['pct_2000', 'plus50_2000', 'tree_canopy_cover_mean'], 
['pct_2000', 'plus50_2000', 'plus10_2000']);

print(gfccFull_2000.limit(10));

///////////////////////////////////////////////////////////////////////
//
//  GFCC DATA 2005
//
///////////////////////////////////////////////////////////////////////

var gfcc05 = ee.ImageCollection('NASA/MEASURES/GFCC/TC/v3')
      .filter(ee.Filter.date('2005-01-01', '2005-12-31'))
      .select('tree_canopy_cover');

//Use a reducer to convert from an image collection to an image with 1 band
var gfcc2005 = gfcc05.reduce(ee.Reducer.mean());

//Mean pct FC per tile 2000
var mean05 = tiles.map(function(feature) {
  return feature.set(gfcc2005.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 30
  }));
});

var tiles3 = mean05.select(['tree_canopy_cover_mean'], ['pct_2005']);

print(tiles3.limit(5), "2005 mean");
