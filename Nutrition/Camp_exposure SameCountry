///////////////////////////////////////////////////////////////////////////////////////////////
//
//Camp nutritional effects - same country
//Code determines number of camps within same country as DHS point at different distances
//
//////////////////////////////////////////////////////////////////////////////////////////////

var dhs = ee.FeatureCollection("users/salem043/ARD/DHS_COMBINED_GIS");
var camps = ee.FeatureCollection('users/salem043/ARD/Cleaned_camp_data_wide');
var country= ee.FeatureCollection('FAO/GAUL/2015/level0').select(["ADM0_CODE"]);

// print(country.limit(1));
// Map.addLayer(dhs, { color: 'blue', pointSize: 0.1}, "DHS data cropped for within 100 km");
// Map.addLayer(camps, { color: 'red', pointSize: 0.1}, "Camp sample");
// Map.addLayer(country, {}, "country borders");


///////////////////////////////////////////////////////////////////////////////////////////////
//
//Add country ID from FAO GAUL to DHS - this will later be used to do camp proximity counts
//conditional on the camp being in the same country as the dhs geopoint.
//
//////////////////////////////////////////////////////////////////////////////////////////////

var properties = ["ADM0_CODE"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Intersection of DHS and FAOGAUL data
var joinAll = ee.Join.saveAll('matched').apply(dhs, country, spatialFilter);

var dhs_adm0 = joinAll.map(function(feature) {
  var joinedFeat = ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  var updatedFeature = feature.copyProperties(polygon, properties);
  return updatedFeature.copyProperties(feature);
});

// Intersection of camps and FAOGAUL data
var joinAll = ee.Join.saveAll('matched').apply(camps, country, spatialFilter);

var camps_adm0 = joinAll.map(function(feature) {
  var joinedFeat = ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  var updatedFeature = feature.copyProperties(polygon, properties);
  return updatedFeature.copyProperties(feature);
});

// print(dhs_adm0.limit(1), "DHS with ADM0 code");
// print(camps_adm0.limit(1), "Camps with ADM0 code");

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps in same country at different distances - define spatial filters
//
//////////////////////////////////////////////////////////////////////////////////////////////


// Distance filter
var spatialFilter = ee.Filter.withinDistance({
  distance: 80000000000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

// Filter to match on ADM0_CODE
var adm0Filter = ee.Filter.equals({
  leftField: 'ADM0_CODE',
  rightField: 'ADM0_CODE'
});

// Combine both filters
var combinedFilter = ee.Filter.and(spatialFilter, adm0Filter);

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 1999
//
//////////////////////////////////////////////////////////////////////////////////////////////

var joined_1999 = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: dhs_adm0, 
  secondary: camps_adm0.filterMetadata('op_1999', 'equals', 1), 
  condition: combinedFilter
});

var withNearestDist = joined_1999.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});

var pointdata_withbandcounts_1999 = withNearestDist.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.lt('distance', 5000);
  pt = pt.set('nSize05_1999_wc', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 10000);
  pt = pt.set('nSize10_1999_wc', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 15000);
  pt = pt.set('nSize15_1999_wc', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 20000);
  pt = pt.set('nSize20_1999_wc', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 25000);
  pt = pt.set('nSize25_1999_wc', neighs.filter(filt).size());
  filt = ee.Filter.lt('distance', 30000);
  pt = pt.set('nSize30_1999_wc', neighs.filter(filt).size());
  return pt;
});

// print(pointdata_withbandcounts_1999.limit(1), "Camp count 1999");
Export.table.toDrive(pointdata_withbandcounts_1999, "DHSCount_sameC_1999", "NutritionPaper");



///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2000
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2000 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2000', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2000.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2000 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2000_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2000_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2000_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20000);
    pt = pt.set('nSize20_2000_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2000_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2000_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2000.limit(1), "Camp count 2000");
Export.table.toDrive(pointdata_withbandcounts_2000, "DHSCount_sameC_2000", "NutritionPaper");




///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2001
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2001 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2001', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2001.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2001 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2001_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2001_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2001_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20010);
    pt = pt.set('nSize20_2001_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2001_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2001_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2001.limit(1), "Camp count 2001");
Export.table.toDrive(pointdata_withbandcounts_2001, "DHSCount_sameC_2001", "NutritionPaper");


  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2002
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2002 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2002', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2002.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2002 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2002_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2002_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2002_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20020);
    pt = pt.set('nSize20_2002_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2002_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2002_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2002.limit(1), "Camp count 2002");
Export.table.toDrive(pointdata_withbandcounts_2002, "DHSCount_sameC_2002", "NutritionPaper");



///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2003
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2003 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2003', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2003.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2003 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2003_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2003_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2003_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20030);
    pt = pt.set('nSize20_2003_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2003_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2003_wc', neighs.filter(filt).size());
    return pt;
  });
  
// print(pointdata_withbandcounts_2003.limit(1), "Camp count 2003");
Export.table.toDrive(pointdata_withbandcounts_2003, "DHSCount_sameC_2003", "NutritionPaper");




///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2004
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2004 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2004', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2004.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2004 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2004_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2004_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2004_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20040);
    pt = pt.set('nSize20_2004_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2004_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2004_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2004.limit(1), "Camp count 2004");
Export.table.toDrive(pointdata_withbandcounts_2004, "DHSCount_sameC_2004", "NutritionPaper");




///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2005
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2005 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2005', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2005.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2005 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2005_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2005_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2005_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20050);
    pt = pt.set('nSize20_2005_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2005_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2005_wc', neighs.filter(filt).size());
    return pt;
  });
  
// print(pointdata_withbandcounts_2005.limit(1), "Camp count 2005");
Export.table.toDrive(pointdata_withbandcounts_2005, "DHSCount_sameC_2005", "NutritionPaper");


  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2006
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2006 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2006', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2006.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2006 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2006_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2006_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2006_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20060);
    pt = pt.set('nSize20_2006_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2006_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2006_wc', neighs.filter(filt).size());
    return pt;
  });
  
Export.table.toDrive(pointdata_withbandcounts_2006, "DHSCount_sameC_2006", "NutritionPaper");



///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2007
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2007 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2007', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2007.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2007 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2007_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2007_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2007_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20070);
    pt = pt.set('nSize20_2007_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2007_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2007_wc', neighs.filter(filt).size());
    return pt;
  });

// print(pointdata_withbandcounts_2007.limit(1), "Camp count 2007");
Export.table.toDrive(pointdata_withbandcounts_2007, "DHSCount_sameC_2007", "NutritionPaper");


  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2008
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2008 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: dhs_adm0, 
    secondary: camps_adm0.filterMetadata('op_2008', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2008.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2008 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2008_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2008_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2008_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20080);
    pt = pt.set('nSize20_2008_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2008_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2008_wc', neighs.filter(filt).size());
    return pt;
  });
  
  print(pointdata_withbandcounts_2008.limit(1), "Camp count 2008");
Export.table.toDrive(pointdata_withbandcounts_2008, "DHSCount_sameC_2008", "NutritionPaper");



///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2009
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2009 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2008, 
    secondary: camps_adm0.filterMetadata('op_2009', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2009.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2009 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2009_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2009_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2009_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20090);
    pt = pt.set('nSize20_2009_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2009_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2009_wc', neighs.filter(filt).size());
    return pt;
  });

// print(pointdata_withbandcounts_2009.limit(1), "Camp count 2009");
  
  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2010
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2010 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2009, 
    secondary: camps_adm0.filterMetadata('op_2010', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2010.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2010 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2010_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2010_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2010_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20100);
    pt = pt.set('nSize20_2010_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2010_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2010_wc', neighs.filter(filt).size());
    return pt;
  });
  
// print(pointdata_withbandcounts_2010.limit(1), "Camp count 2010");
  
  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2011
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2011 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2010, 
    secondary: camps_adm0.filterMetadata('op_2011', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2011.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2011 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2011_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2011_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2011_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20110);
    pt = pt.set('nSize20_2011_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2011_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2011_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2011.limit(1), "Camp count 2011");
  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2012
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2012 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2011, 
    secondary: camps_adm0.filterMetadata('op_2012', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2012.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2012 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2012_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2012_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2012_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20120);
    pt = pt.set('nSize20_2012_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2012_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2012_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2012.limit(1), "Camp count 2012");


///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2013
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2013 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2012, 
    secondary: camps_adm0.filterMetadata('op_2013', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2013.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2013 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2013_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2013_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2013_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20130);
    pt = pt.set('nSize20_2013_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2013_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2013_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2013.limit(1), "Camp count 2013");
  
  

///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2014
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2014 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2013, 
    secondary: camps_adm0.filterMetadata('op_2014', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2014.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2014 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2014_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2014_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2014_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20140);
    pt = pt.set('nSize20_2014_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2014_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2014_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2014.limit(1), "Camp count 2014");


///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2015
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2015 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2014, 
    secondary: camps_adm0.filterMetadata('op_2015', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2015.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2015 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2015_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2015_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2015_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20150);
    pt = pt.set('nSize20_2015_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2015_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2015_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2015.limit(1), "Camp count 2015");


///////////////////////////////////////////////////////////////////////////////////////////////
//
//N camps at distance cutoffs - 2016
//
//////////////////////////////////////////////////////////////////////////////////////////////
  
  var joined_2016 = ee.Join.saveAll({
    matchesKey: 'neighbors', 
    measureKey: 'distance',
    ordering: 'distance'
  }).apply({
    primary: pointdata_withbandcounts_2015, 
    secondary: camps_adm0.filterMetadata('op_2016', 'equals', 1), 
    condition: combinedFilter
  });
  
  var withNearestDist = joined_2016.map(function(f) {
    var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
    .get('distance');
    return f.set('nearestDist', nearestDist);
  });
  
  var pointdata_withbandcounts_2016 = withNearestDist.map(function(pt) {
    var neighs = ee.List(pt.get('neighbors'));
    var filt = ee.Filter.lt('distance', 5000);
    pt = pt.set('nSize05_2016_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 10000);
    pt = pt.set('nSize10_2016_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 15000);
    pt = pt.set('nSize15_2016_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 20160);
    pt = pt.set('nSize20_2016_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 25000);
    pt = pt.set('nSize25_2016_wc', neighs.filter(filt).size());
    filt = ee.Filter.lt('distance', 30000);
    pt = pt.set('nSize30_2016_wc', neighs.filter(filt).size());
    return pt;
  });
  
  // print(pointdata_withbandcounts_2016.limit(1), "Camp count 2016");

Export.table.toDrive(pointdata_withbandcounts_2016, "DHS_campCounts_sameC", "NutritionPaper");


  