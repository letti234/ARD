//Refugees and deforestation analysis
//Tabular data export: Demonstration file


///////////////////////////////////////////////////////////////////////
//
//  Initial data prep
//
///////////////////////////////////////////////////////////////////////

//Define a polygon where we can randomly sample points
var countries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');
var congo = countries.filter(ee.Filter.eq('country_na', 'Rep of the Congo'));

//These points stand in for the camp locations in my data, which 
//are not yet publicly available
var campRegion = ee.FeatureCollection.randomPoints(congo, 10);
Map.addLayer(campRegion, {}, "30 km buffer around 'camps'");

//Import Hansen Global Forest Change data
var gfc2014 = ee.Image('UMD/hansen/global_forest_change_2015');

//GFC bands we rely on for our analysis
var gfcSampleCover2000= gfc2014.select(["treecover2000"]);
var gfcSampleMask=gfc2014.select(["datamask"]);
var gfcSampleLossYr = gfc2014.select(["lossyear"]);

//30 km buffers around "camps"
var bufferPoly = function(feature) {
  return feature.buffer(30000);  
};
var buffers = campRegion.map(bufferPoly);
var buffsUnion = buffers.union();

///////////////////////////////////////////////////////////////////////
//
//  Create dissolved buffer FC - so buffers do not overlap
//
///////////////////////////////////////////////////////////////////////

var bufferPoly = function(feature) {
  return feature.buffer(30000);  
};

var buffers = campRegion.map(bufferPoly);

var buffsUnion = buffers.union();

//dissolve and transform to FC so that we can identify each tile's buffer ID
var buffsGeoDissolve =buffers.geometry().dissolve();
Map.addLayer(buffsGeoDissolve, {}, 'Dissolve using geometry().dissolve()');

var fc = ee.FeatureCollection([
  ee.Feature(buffsGeoDissolve)
]);

var multiGeomExplodeList = fc.toList(fc.size()).map(function(feature) {
  var geomList = ee.Feature(feature).geometry().geometries();
  var featureList = geomList.map(function(geom) {
    return ee.Feature(ee.Geometry(geom));
  });
  return featureList;
})
.flatten();

var buffDissolveFC = ee.FeatureCollection(multiGeomExplodeList);

///////////////////////////////////////////////////////////////////////
//
//  Tile production - define equally sized tiles within the buffer area
//  We'll use these tiles to calculate zonal stats.
//  The tiles are the unit of analysis in our regression
//
///////////////////////////////////////////////////////////////////////

var tiles = tile(buffsUnion, 0.01); //Define 0.01 degree tiles 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

///////////////////////////////////////////////////////////////////////
//
//  Zonal statistics: get tile and buffer ID
//  I use the buffer idea to cluster standard errors
//  The tile id helps keep data organized later on
//
///////////////////////////////////////////////////////////////////////

var buffs2 = buffDissolveFC.select(["system:index"], ["Buffer_ID"]);


var properties = ["Buffer_ID"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(tiles, buffs2, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var bufferID = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});


///print('Buffer ID', bufferID.limit(10));



///////////////////////////////////////////////////////////////////////
//
//  Clean the GFC data - use the mask layer to assign all pixels
//  with no data or in bodies of water as NA
//
///////////////////////////////////////////////////////////////////////

//Reclassify 2 = NA and 0 = NA in the mask layer

var gfcSampleMask = gfcSampleMask
.remap([ 1],
       [1], null);
       
//Map.addLayer(gfcSampleMask);

//Mask the mask layer to the two other GEE rasters so that NAs in the
//mask layer are NAs in those rasters
//var gfcSampleCover2000Masked=mask()

var gfc2000CoverMasked = gfcSampleCover2000.updateMask(gfcSampleMask);
//Map.addLayer(gfc2000CoverMasked);

var gfcLossYearMasked  = gfcSampleLossYr.updateMask(gfcSampleMask);
//Map.addLayer(gfcLossYearMasked);


///////////////////////////////////////////////////////////////////////
//
//  Collect GFC zonal stats
//
///////////////////////////////////////////////////////////////////////

//1. Function counts the number of pixels in each tile

var pixelCounts = tiles.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
  }));
});

//Change the property name to avoid issues 
var tileCounts = pixelCounts.select(
    ['treecover2000'], ['number_pixels']            
);

//print("Number of pixels that are not NA", tileCounts);

//2. Function to calculate the mean pct forest cover of tile in 2000

var tileCountsPlusBaseline = tileCounts.map(function(feature) {
  return feature.set(gfc2000CoverMasked.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
  }));
});

//print("Updated FC", tileCountsPlusBaseline);


//2. Number of pixels with zero FC in 2000

var gfc2000CoverZeroes = gfc2000CoverMasked
.remap([ 0], [1], null);

//print(gfc2000CoverZeroes, "2000 pixels with zero FC");
//Map.addLayer(gfc2000CoverZeroes);

var TileCounts2 = tileCountsPlusBaseline.map(function(feature) {
  return feature.set(gfc2000CoverZeroes.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry(),
  }));
});

//print(TileCounts2);

var DataRenamed = TileCounts2.map(function(feat){
  return ee.Feature(feat.geometry(), { 
    numPixelsNoNA: feat.get('number_pixels'),
    numPixelsZeroFC2000: feat.get('remapped'),
    meanPctCover2000: feat.get('treecover2000')
  });
});
///print(DataRenamed.limit(10), "Renaming GFC data");

///////////////////////////////////////////////////////////////////////
//
//  Function that counts pixels that made transition from
//  forest cover to zero forest cover by year
//
///////////////////////////////////////////////////////////////////////


// indices for years you want to calculate stats for (2001 to 2014) 
var indices = ee.List.sequence(1,12);

// map over feature collection 
var tiles_new = tiles.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
  var mdata = indices.iterate(function(i, dictin){
    
    // get year for this iteration 
    var thisyear = i ;

    // create property name for this year (e.g. "loss2001" for first iteration)
    var bandname = ee.String('loss').cat(ee.Number(thisyear).int()) ;
    
    var gfcLossthisyear = gfcLossYearMasked.remap([i], [1], null);
    
    var dict = gfcLossthisyear
    
      // rename band such that the end dictionary key is unique to this year 
      .rename(bandname)
      
      // get zonal statistics 
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100});
      
    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict);
    
  }, ee.Dictionary()); // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(mdata);

});

///print(tiles_new.limit(3), "Tile results");


///////////////////////////////////////////////////////////////////////
//
//  identify grid centroids 
//  use centroids to identify spatial joins and intersections with
//  polygon data
//
///////////////////////////////////////////////////////////////////////

//Obtain tile centroids - basically converts our tiles into point data
var getCentroids = function(feature) {
  return feature.set({centralPoint: feature.centroid()});
};

var tileCenter = tiles_new.map(getCentroids);

var tileCentroids = tileCenter.map(function(f) {
  var centroid = ee.Feature(ee.List(f.get('centralPoint')));
  return centroid;
});
///Map.addLayer(tileCentroids);

///print(tileCentroids.limit(3), 'centroids');

/////////////////////////////////////////////////////////////////////
//
//Export data - I export it in chunks by zonal stat group and then
//merge it back together after it exports.
//
/////////////////////////////////////////////////////////////////////
print("Exported GFC tile data", tiles_new.limit(2));

Export.table.toDrive({
  collection: tiles_new.select(['system:index', 'loss1', 'loss2', 'loss3',
  'loss4', 'loss5', 'loss6', 'loss7', 'loss8', 'loss9', 'loss10', 'loss11', 'loss12'],
  ['ID', 'loss2001', 'loss2002', 'loss2003', 'loss2004', 'loss2005', 'loss2006', 
  'loss2007', 'loss2008', 'loss2009', 'loss2010', 'loss2011', 'loss2012'   ]),
  fileFormat: 'SHP',
  description: 'ShapefileForestlossGroup1',
  folder: "deforTilesGEE"
});


